/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Tag'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Tag'));
  } else {
    // Browser globals (root is window)
    if (!root.FoodAuthentSwaggerApi) {
      root.FoodAuthentSwaggerApi = {};
    }
    root.FoodAuthentSwaggerApi.Model = factory(root.FoodAuthentSwaggerApi.ApiClient, root.FoodAuthentSwaggerApi.Tag);
  }
}(this, function(ApiClient, Tag) {
  'use strict';




  /**
   * The Model model module.
   * @module model/Model
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Model</code>.
   * A model created via training and used for prediction. Can also be a workflow.
   * @alias module:model/Model
   * @class
   */
  var exports = function() {
    var _this = this;










  };

  /**
   * Constructs a <code>Model</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Model} obj Optional instance to populate.
   * @return {module:model/Model} The populated <code>Model</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fa-id')) {
        obj['fa-id'] = ApiClient.convertToType(data['fa-id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('author')) {
        obj['author'] = ApiClient.convertToType(data['author'], 'String');
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('version')) {
        obj['version'] = ApiClient.convertToType(data['version'], 'Number');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
      }
      if (data.hasOwnProperty('file-id')) {
        obj['file-id'] = ApiClient.convertToType(data['file-id'], 'String');
      }
    }
    return obj;
  }

  /**
   * A global id within the FoodAuthent-system.
   * @member {String} fa-id
   */
  exports.prototype['fa-id'] = undefined;
  /**
   * A name for the model.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * A more verbose description of the model.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The authors name (TODO - could reference a user in the future).
   * @member {String} author
   */
  exports.prototype['author'] = undefined;
  /**
   * The creation date.
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * The model's version.
   * @member {Number} version
   */
  exports.prototype['version'] = undefined;
  /**
   * The type of the model in order to be able to check for compatibility of the workflows using it.
   * @member {module:model/Model.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Descriptive tags/annotations for the model.
   * @member {Array.<module:model/Tag>} tags
   */
  exports.prototype['tags'] = undefined;
  /**
   * id referencing the model file.
   * @member {String} file-id
   */
  exports.prototype['file-id'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "knime_workflow"
     * @const
     */
    "knime_workflow": "knime_workflow",
    /**
     * value: "knime_python"
     * @const
     */
    "knime_python": "knime_python",
    /**
     * value: "pmml"
     * @const
     */
    "pmml": "pmml"  };


  return exports;
}));


