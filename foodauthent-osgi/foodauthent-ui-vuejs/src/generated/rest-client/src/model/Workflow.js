/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Tag', 'model/WorkflowModule', 'model/WorkflowParameter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Tag'), require('./WorkflowModule'), require('./WorkflowParameter'));
  } else {
    // Browser globals (root is window)
    if (!root.FoodAuthentSwaggerApi) {
      root.FoodAuthentSwaggerApi = {};
    }
    root.FoodAuthentSwaggerApi.Workflow = factory(root.FoodAuthentSwaggerApi.ApiClient, root.FoodAuthentSwaggerApi.Tag, root.FoodAuthentSwaggerApi.WorkflowModule, root.FoodAuthentSwaggerApi.WorkflowParameter);
  }
}(this, function(ApiClient, Tag, WorkflowModule, WorkflowParameter) {
  'use strict';




  /**
   * The Workflow model module.
   * @module model/Workflow
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Workflow</code>.
   * A workflow for a certain task.
   * @alias module:model/Workflow
   * @class
   * @param name {String} 
   * @param representation {module:model/Workflow.RepresentationEnum} The workflow representation, e.g. represented by a scripting language, cwl or a KNIME-workflow.
   * @param type {module:model/Workflow.TypeEnum} The type of the workflow. IMPORTANT: This property determines the required workflow input and output, e.g., PredictionWorkflowInput and PredicitonWorkflowOutput-entity.
   * @param fileId {String} id referencing the workflow file.
   */
  var exports = function(name, representation, type, fileId) {
    var _this = this;


    _this['name'] = name;

    _this['representation'] = representation;
    _this['type'] = type;


    _this['file-id'] = fileId;


  };

  /**
   * Constructs a <code>Workflow</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Workflow} obj Optional instance to populate.
   * @return {module:model/Workflow} The populated <code>Workflow</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fa-id')) {
        obj['fa-id'] = ApiClient.convertToType(data['fa-id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('representation')) {
        obj['representation'] = ApiClient.convertToType(data['representation'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('parameters')) {
        obj['parameters'] = ApiClient.convertToType(data['parameters'], [WorkflowParameter]);
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
      }
      if (data.hasOwnProperty('file-id')) {
        obj['file-id'] = ApiClient.convertToType(data['file-id'], 'String');
      }
      if (data.hasOwnProperty('modules')) {
        obj['modules'] = ApiClient.convertToType(data['modules'], [WorkflowModule]);
      }
      if (data.hasOwnProperty('model-type')) {
        obj['model-type'] = ApiClient.convertToType(data['model-type'], 'String');
      }
    }
    return obj;
  }

  /**
   * A global id within the FoodAuthent-system.
   * @member {String} fa-id
   */
  exports.prototype['fa-id'] = undefined;
  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The workflow representation, e.g. represented by a scripting language, cwl or a KNIME-workflow.
   * @member {module:model/Workflow.RepresentationEnum} representation
   */
  exports.prototype['representation'] = undefined;
  /**
   * The type of the workflow. IMPORTANT: This property determines the required workflow input and output, e.g., PredictionWorkflowInput and PredicitonWorkflowOutput-entity.
   * @member {module:model/Workflow.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The parameters of the workflow, TODO - should maybe be a map.
   * @member {Array.<module:model/WorkflowParameter>} parameters
   */
  exports.prototype['parameters'] = undefined;
  /**
   * Descriptive tags/annotations for the workflow.
   * @member {Array.<module:model/Tag>} tags
   */
  exports.prototype['tags'] = undefined;
  /**
   * id referencing the workflow file.
   * @member {String} file-id
   */
  exports.prototype['file-id'] = undefined;
  /**
   * The workflow modules (including their parameters) required by this workflow or empty (or null) if none required.
   * @member {Array.<module:model/WorkflowModule>} modules
   */
  exports.prototype['modules'] = undefined;
  /**
   * Type of the model this workflow can consume or produce. Can be left empty, e.g., in case of a preprocessing workflow. Model type must match one of the model's type property.
   * @member {module:model/Workflow.ModelTypeEnum} model-type
   */
  exports.prototype['model-type'] = undefined;


  /**
   * Allowed values for the <code>representation</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RepresentationEnum = {
    /**
     * value: "cwl"
     * @const
     */
    "cwl": "cwl",
    /**
     * value: "r"
     * @const
     */
    "r": "r",
    /**
     * value: "python"
     * @const
     */
    "python": "python",
    /**
     * value: "knime"
     * @const
     */
    "knime": "knime"  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "prediction_workflow"
     * @const
     */
    "prediction_workflow": "prediction_workflow",
    /**
     * value: "training_workflow"
     * @const
     */
    "training_workflow": "training_workflow"  };

  /**
   * Allowed values for the <code>model-type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ModelTypeEnum = {
    /**
     * value: "knime_workflow"
     * @const
     */
    "knime_workflow": "knime_workflow",
    /**
     * value: "knime_python"
     * @const
     */
    "knime_python": "knime_python",
    /**
     * value: "pmml"
     * @const
     */
    "pmml": "pmml"  };


  return exports;
}));


