/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FileMetadata', 'model/Fingerprint', 'model/FingerprintSet', 'model/FingerprintSetPageResult', 'model/Model', 'model/ModelPageResult', 'model/Prediction', 'model/PredictionJob', 'model/PredictionJobPageResult', 'model/PredictionPageResult', 'model/PredictionWorkflowInput', 'model/PredictionWorkflowOutput', 'model/Product', 'model/ProductPageResult', 'model/SOP', 'model/SOPPageResult', 'model/Tag', 'model/TagPageResult', 'model/TrainingJob', 'model/TrainingJobPageResult', 'model/TrainingWorkflowInput', 'model/TrainingWorkflowOutput', 'model/Workflow', 'model/WorkflowModule', 'model/WorkflowModuleInput', 'model/WorkflowPageResult', 'model/WorkflowParameter', 'api/FileApi', 'api/FingerprintApi', 'api/ModelApi', 'api/ProductApi', 'api/SopApi', 'api/WorkflowApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/FileMetadata'), require('./model/Fingerprint'), require('./model/FingerprintSet'), require('./model/FingerprintSetPageResult'), require('./model/Model'), require('./model/ModelPageResult'), require('./model/Prediction'), require('./model/PredictionJob'), require('./model/PredictionJobPageResult'), require('./model/PredictionPageResult'), require('./model/PredictionWorkflowInput'), require('./model/PredictionWorkflowOutput'), require('./model/Product'), require('./model/ProductPageResult'), require('./model/SOP'), require('./model/SOPPageResult'), require('./model/Tag'), require('./model/TagPageResult'), require('./model/TrainingJob'), require('./model/TrainingJobPageResult'), require('./model/TrainingWorkflowInput'), require('./model/TrainingWorkflowOutput'), require('./model/Workflow'), require('./model/WorkflowModule'), require('./model/WorkflowModuleInput'), require('./model/WorkflowPageResult'), require('./model/WorkflowParameter'), require('./api/FileApi'), require('./api/FingerprintApi'), require('./api/ModelApi'), require('./api/ProductApi'), require('./api/SopApi'), require('./api/WorkflowApi'));
  }
}(function(ApiClient, FileMetadata, Fingerprint, FingerprintSet, FingerprintSetPageResult, Model, ModelPageResult, Prediction, PredictionJob, PredictionJobPageResult, PredictionPageResult, PredictionWorkflowInput, PredictionWorkflowOutput, Product, ProductPageResult, SOP, SOPPageResult, Tag, TagPageResult, TrainingJob, TrainingJobPageResult, TrainingWorkflowInput, TrainingWorkflowOutput, Workflow, WorkflowModule, WorkflowModuleInput, WorkflowPageResult, WorkflowParameter, FileApi, FingerprintApi, ModelApi, ProductApi, SopApi, WorkflowApi) {
  'use strict';

  /**
   * This_is_the_FoodAuthent_API_Description__www_foodauthent_net.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var FoodAuthentSwaggerApi = require('index'); // See note below*.
   * var xxxSvc = new FoodAuthentSwaggerApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new FoodAuthentSwaggerApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new FoodAuthentSwaggerApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new FoodAuthentSwaggerApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The FileMetadata model constructor.
     * @property {module:model/FileMetadata}
     */
    FileMetadata: FileMetadata,
    /**
     * The Fingerprint model constructor.
     * @property {module:model/Fingerprint}
     */
    Fingerprint: Fingerprint,
    /**
     * The FingerprintSet model constructor.
     * @property {module:model/FingerprintSet}
     */
    FingerprintSet: FingerprintSet,
    /**
     * The FingerprintSetPageResult model constructor.
     * @property {module:model/FingerprintSetPageResult}
     */
    FingerprintSetPageResult: FingerprintSetPageResult,
    /**
     * The Model model constructor.
     * @property {module:model/Model}
     */
    Model: Model,
    /**
     * The ModelPageResult model constructor.
     * @property {module:model/ModelPageResult}
     */
    ModelPageResult: ModelPageResult,
    /**
     * The Prediction model constructor.
     * @property {module:model/Prediction}
     */
    Prediction: Prediction,
    /**
     * The PredictionJob model constructor.
     * @property {module:model/PredictionJob}
     */
    PredictionJob: PredictionJob,
    /**
     * The PredictionJobPageResult model constructor.
     * @property {module:model/PredictionJobPageResult}
     */
    PredictionJobPageResult: PredictionJobPageResult,
    /**
     * The PredictionPageResult model constructor.
     * @property {module:model/PredictionPageResult}
     */
    PredictionPageResult: PredictionPageResult,
    /**
     * The PredictionWorkflowInput model constructor.
     * @property {module:model/PredictionWorkflowInput}
     */
    PredictionWorkflowInput: PredictionWorkflowInput,
    /**
     * The PredictionWorkflowOutput model constructor.
     * @property {module:model/PredictionWorkflowOutput}
     */
    PredictionWorkflowOutput: PredictionWorkflowOutput,
    /**
     * The Product model constructor.
     * @property {module:model/Product}
     */
    Product: Product,
    /**
     * The ProductPageResult model constructor.
     * @property {module:model/ProductPageResult}
     */
    ProductPageResult: ProductPageResult,
    /**
     * The SOP model constructor.
     * @property {module:model/SOP}
     */
    SOP: SOP,
    /**
     * The SOPPageResult model constructor.
     * @property {module:model/SOPPageResult}
     */
    SOPPageResult: SOPPageResult,
    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag: Tag,
    /**
     * The TagPageResult model constructor.
     * @property {module:model/TagPageResult}
     */
    TagPageResult: TagPageResult,
    /**
     * The TrainingJob model constructor.
     * @property {module:model/TrainingJob}
     */
    TrainingJob: TrainingJob,
    /**
     * The TrainingJobPageResult model constructor.
     * @property {module:model/TrainingJobPageResult}
     */
    TrainingJobPageResult: TrainingJobPageResult,
    /**
     * The TrainingWorkflowInput model constructor.
     * @property {module:model/TrainingWorkflowInput}
     */
    TrainingWorkflowInput: TrainingWorkflowInput,
    /**
     * The TrainingWorkflowOutput model constructor.
     * @property {module:model/TrainingWorkflowOutput}
     */
    TrainingWorkflowOutput: TrainingWorkflowOutput,
    /**
     * The Workflow model constructor.
     * @property {module:model/Workflow}
     */
    Workflow: Workflow,
    /**
     * The WorkflowModule model constructor.
     * @property {module:model/WorkflowModule}
     */
    WorkflowModule: WorkflowModule,
    /**
     * The WorkflowModuleInput model constructor.
     * @property {module:model/WorkflowModuleInput}
     */
    WorkflowModuleInput: WorkflowModuleInput,
    /**
     * The WorkflowPageResult model constructor.
     * @property {module:model/WorkflowPageResult}
     */
    WorkflowPageResult: WorkflowPageResult,
    /**
     * The WorkflowParameter model constructor.
     * @property {module:model/WorkflowParameter}
     */
    WorkflowParameter: WorkflowParameter,
    /**
     * The FileApi service constructor.
     * @property {module:api/FileApi}
     */
    FileApi: FileApi,
    /**
     * The FingerprintApi service constructor.
     * @property {module:api/FingerprintApi}
     */
    FingerprintApi: FingerprintApi,
    /**
     * The ModelApi service constructor.
     * @property {module:api/ModelApi}
     */
    ModelApi: ModelApi,
    /**
     * The ProductApi service constructor.
     * @property {module:api/ProductApi}
     */
    ProductApi: ProductApi,
    /**
     * The SopApi service constructor.
     * @property {module:api/SopApi}
     */
    SopApi: SopApi,
    /**
     * The WorkflowApi service constructor.
     * @property {module:api/WorkflowApi}
     */
    WorkflowApi: WorkflowApi
  };

  return exports;
}));
