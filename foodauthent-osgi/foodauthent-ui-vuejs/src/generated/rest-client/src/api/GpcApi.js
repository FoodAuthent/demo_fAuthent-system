/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/GPCBrickData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GPCBrickData'));
  } else {
    // Browser globals (root is window)
    if (!root.FoodAuthentSwaggerApi) {
      root.FoodAuthentSwaggerApi = {};
    }
    root.FoodAuthentSwaggerApi.GpcApi = factory(root.FoodAuthentSwaggerApi.ApiClient, root.FoodAuthentSwaggerApi.GPCBrickData);
  }
}(this, function(ApiClient, GPCBrickData) {
  'use strict';

  /**
   * Gpc service.
   * @module api/GpcApi
   * @version 1.0.0
   */

  /**
   * Constructs a new GpcApi. 
   * @alias module:api/GpcApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the findGpcBricks operation.
     * @callback module:api/GpcApi~findGpcBricksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GPCBrickData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * find gpc bricks by filter
     * @param {String} s 
     * @param {String} lang 
     * @param {module:api/GpcApi~findGpcBricksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GPCBrickData>}
     */
    this.findGpcBricks = function(s, lang, callback) {
      var postBody = null;

      // verify the required parameter 's' is set
      if (s === undefined || s === null) {
        throw new Error("Missing the required parameter 's' when calling findGpcBricks");
      }

      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling findGpcBricks");
      }


      var pathParams = {
      };
      var queryParams = {
        's': s,
        'lang': lang,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = '[GPCBrickData]';

      return this.apiClient.callApi(
        '/gpc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
