/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FoodAuthentSwaggerApi) {
      root.FoodAuthentSwaggerApi = {};
    }
    root.FoodAuthentSwaggerApi.RelationApi = factory(root.FoodAuthentSwaggerApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Relation service.
   * @module api/RelationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RelationApi. 
   * @alias module:api/RelationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getEntities operation.
     * @callback module:api/RelationApi~getEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get entities with support for foreign key relationships
     * @param {module:api/RelationApi~getEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.getEntities = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = '[String]';

      return this.apiClient.callApi(
        '/relation/entities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getForeignKeyEntities operation.
     * @callback module:api/RelationApi~getForeignKeyEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get supported foreign key relations for entity
     * @param {String} entityName root entity name.
     * @param {String} faId fa-id to match with in referenced entities.
     * @param {String} referencedEntity root entity name.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber the page number starting at 1
     * @param {Number} opts.pageSize entries per page, minimum 1
     * @param {module:api/RelationApi~getForeignKeyEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getForeignKeyEntities = function(entityName, faId, referencedEntity, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling getForeignKeyEntities");
      }

      // verify the required parameter 'faId' is set
      if (faId === undefined || faId === null) {
        throw new Error("Missing the required parameter 'faId' when calling getForeignKeyEntities");
      }

      // verify the required parameter 'referencedEntity' is set
      if (referencedEntity === undefined || referencedEntity === null) {
        throw new Error("Missing the required parameter 'referencedEntity' when calling getForeignKeyEntities");
      }


      var pathParams = {
        'entity-name': entityName,
        'fa-id': faId,
        'referenced-entity': referencedEntity
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Object';

      return this.apiClient.callApi(
        '/relation/entity/{entity-name}/{fa-id}/{referenced-entity}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedEntities operation.
     * @callback module:api/RelationApi~getSupportedEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get supported foreign key relations for entity
     * @param {String} entityName root entity name.
     * @param {module:api/RelationApi~getSupportedEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.getSupportedEntities = function(entityName, callback) {
      var postBody = null;

      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling getSupportedEntities");
      }


      var pathParams = {
        'entity-name': entityName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = '[String]';

      return this.apiClient.callApi(
        '/relation/entity/{entity-name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
