/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/UserAuthenticationRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UserAuthenticationRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.FoodAuthentSwaggerApi) {
      root.FoodAuthentSwaggerApi = {};
    }
    root.FoodAuthentSwaggerApi.AuthenticationApi = factory(root.FoodAuthentSwaggerApi.ApiClient, root.FoodAuthentSwaggerApi.UserAuthenticationRequest);
  }
}(this, function(ApiClient, UserAuthenticationRequest) {
  'use strict';

  /**
   * Authentication service.
   * @module api/AuthenticationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AuthenticationApi. 
   * @alias module:api/AuthenticationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authenticateUserJSONWebToken operation.
     * @callback module:api/AuthenticationApi~authenticateUserJSONWebTokenCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate user.
     * TODO
     * @param {module:model/UserAuthenticationRequest} userAuthenticationRequest TODO
     * @param {module:api/AuthenticationApi~authenticateUserJSONWebTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.authenticateUserJSONWebToken = function(userAuthenticationRequest, callback) {
      var postBody = userAuthenticationRequest;

      // verify the required parameter 'userAuthenticationRequest' is set
      if (userAuthenticationRequest === undefined || userAuthenticationRequest === null) {
        throw new Error("Missing the required parameter 'userAuthenticationRequest' when calling authenticateUserJSONWebToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = String;

      return this.apiClient.callApi(
        '/authenticate/jwt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshJSONWebToken operation.
     * @callback module:api/AuthenticationApi~refreshJSONWebTokenCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * refresh JSON Web Token to extend expirtation time
     * TODO
     * @param {String} body User&#39;s JSON Web Token to refresh
     * @param {module:api/AuthenticationApi~refreshJSONWebTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.refreshJSONWebToken = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refreshJSONWebToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = ['text/plain'];
      var accepts = ['text/plain'];
      var returnType = String;

      return this.apiClient.callApi(
        '/authenticate/jwt/refresh', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyJSONWebToken operation.
     * @callback module:api/AuthenticationApi~verifyJSONWebTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verify JSON Web Token.
     * TODO
     * @param {String} body JWT token to be verfied
     * @param {module:api/AuthenticationApi~verifyJSONWebTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.verifyJSONWebToken = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyJSONWebToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = ['text/plain'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/authenticate/jwt/verify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
