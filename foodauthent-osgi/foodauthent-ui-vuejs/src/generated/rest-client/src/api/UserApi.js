/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/ChangePasswordRequest', '../model/User', '../model/UserBase', '../model/UserCreateRequest', '../model/UserGroup', '../model/UserGroupBase', '../model/UserGroupCreateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChangePasswordRequest'), require('../model/User'), require('../model/UserBase'), require('../model/UserCreateRequest'), require('../model/UserGroup'), require('../model/UserGroupBase'), require('../model/UserGroupCreateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.FoodAuthentSwaggerApi) {
      root.FoodAuthentSwaggerApi = {};
    }
    root.FoodAuthentSwaggerApi.UserApi = factory(root.FoodAuthentSwaggerApi.ApiClient, root.FoodAuthentSwaggerApi.ChangePasswordRequest, root.FoodAuthentSwaggerApi.User, root.FoodAuthentSwaggerApi.UserBase, root.FoodAuthentSwaggerApi.UserCreateRequest, root.FoodAuthentSwaggerApi.UserGroup, root.FoodAuthentSwaggerApi.UserGroupBase, root.FoodAuthentSwaggerApi.UserGroupCreateRequest);
  }
}(this, function(ApiClient, ChangePasswordRequest, User, UserBase, UserCreateRequest, UserGroup, UserGroupBase, UserGroupCreateRequest) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create new user.
     * TODO
     * @param {module:model/UserCreateRequest} userCreateRequest TODO
     * @param {module:api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.createUser = function(userCreateRequest, callback) {
      var postBody = userCreateRequest;

      // verify the required parameter 'userCreateRequest' is set
      if (userCreateRequest === undefined || userCreateRequest === null) {
        throw new Error("Missing the required parameter 'userCreateRequest' when calling createUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'User';

      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserGroup operation.
     * @callback module:api/UserApi~createUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create new user group.
     * TODO
     * @param {module:model/UserGroupCreateRequest} userGroupCreateRequest TODO
     * @param {module:api/UserApi~createUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.createUserGroup = function(userGroupCreateRequest, callback) {
      var postBody = userGroupCreateRequest;

      // verify the required parameter 'userGroupCreateRequest' is set
      if (userGroupCreateRequest === undefined || userGroupCreateRequest === null) {
        throw new Error("Missing the required parameter 'userGroupCreateRequest' when calling createUserGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'UserGroup';

      return this.apiClient.callApi(
        '/user/group', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UserApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete existing user.
     * TODO
     * @param {String} dn The user&#39;s LDAP dn
     * @param {module:api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUser = function(dn, callback) {
      var postBody = null;

      // verify the required parameter 'dn' is set
      if (dn === undefined || dn === null) {
        throw new Error("Missing the required parameter 'dn' when calling deleteUser");
      }


      var pathParams = {
        'dn': dn
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/{dn}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserGroup operation.
     * @callback module:api/UserApi~deleteUserGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete existing user group.
     * TODO
     * @param {String} dn The user group&#39;s LDAP dn
     * @param {module:api/UserApi~deleteUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUserGroup = function(dn, callback) {
      var postBody = null;

      // verify the required parameter 'dn' is set
      if (dn === undefined || dn === null) {
        throw new Error("Missing the required parameter 'dn' when calling deleteUserGroup");
      }


      var pathParams = {
        'dn': dn
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/group/{dn}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePassword operation.
     * @callback module:api/UserApi~generatePasswordCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * generate password for user.
     * TODO
     * @param {String} dn The user&#39;s LDAP dn
     * @param {Object} opts Optional parameters
     * @param {Number} opts.length length of generated password
     * @param {module:api/UserApi~generatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.generatePassword = function(dn, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dn' is set
      if (dn === undefined || dn === null) {
        throw new Error("Missing the required parameter 'dn' when calling generatePassword");
      }


      var pathParams = {
        'dn': dn
      };
      var queryParams = {
        'length': opts['length'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/user/{dn}/pwgen', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UserApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get existing user.
     * TODO
     * @param {String} dn The user&#39;s LDAP dn
     * @param {module:api/UserApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUser = function(dn, callback) {
      var postBody = null;

      // verify the required parameter 'dn' is set
      if (dn === undefined || dn === null) {
        throw new Error("Missing the required parameter 'dn' when calling getUser");
      }


      var pathParams = {
        'dn': dn
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'User';

      return this.apiClient.callApi(
        '/user/{dn}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserGroup operation.
     * @callback module:api/UserApi~getUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get existing user group.
     * TODO
     * @param {String} dn The user group&#39;s LDAP dn
     * @param {module:api/UserApi~getUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.getUserGroup = function(dn, callback) {
      var postBody = null;

      // verify the required parameter 'dn' is set
      if (dn === undefined || dn === null) {
        throw new Error("Missing the required parameter 'dn' when calling getUserGroup");
      }


      var pathParams = {
        'dn': dn
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'UserGroup';

      return this.apiClient.callApi(
        '/user/group/{dn}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setPassword operation.
     * @callback module:api/UserApi~setPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * set password for user.
     * TODO
     * @param {String} dn The user&#39;s LDAP dn
     * @param {module:model/ChangePasswordRequest} changePasswordRequest TODO
     * @param {module:api/UserApi~setPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setPassword = function(dn, changePasswordRequest, callback) {
      var postBody = changePasswordRequest;

      // verify the required parameter 'dn' is set
      if (dn === undefined || dn === null) {
        throw new Error("Missing the required parameter 'dn' when calling setPassword");
      }

      // verify the required parameter 'changePasswordRequest' is set
      if (changePasswordRequest === undefined || changePasswordRequest === null) {
        throw new Error("Missing the required parameter 'changePasswordRequest' when calling setPassword");
      }


      var pathParams = {
        'dn': dn
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/{dn}/pwset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UserApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update existing user.
     * TODO
     * @param {String} dn The user&#39;s LDAP dn
     * @param {module:model/UserBase} userBase TODO
     * @param {module:api/UserApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.updateUser = function(dn, userBase, callback) {
      var postBody = userBase;

      // verify the required parameter 'dn' is set
      if (dn === undefined || dn === null) {
        throw new Error("Missing the required parameter 'dn' when calling updateUser");
      }

      // verify the required parameter 'userBase' is set
      if (userBase === undefined || userBase === null) {
        throw new Error("Missing the required parameter 'userBase' when calling updateUser");
      }


      var pathParams = {
        'dn': dn
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'User';

      return this.apiClient.callApi(
        '/user/{dn}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserGroup operation.
     * @callback module:api/UserApi~updateUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update existing user group.
     * TODO
     * @param {String} dn The user group&#39;s LDAP dn
     * @param {module:model/UserGroupBase} userGroupBase TODO
     * @param {module:api/UserApi~updateUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.updateUserGroup = function(dn, userGroupBase, callback) {
      var postBody = userGroupBase;

      // verify the required parameter 'dn' is set
      if (dn === undefined || dn === null) {
        throw new Error("Missing the required parameter 'dn' when calling updateUserGroup");
      }

      // verify the required parameter 'userGroupBase' is set
      if (userGroupBase === undefined || userGroupBase === null) {
        throw new Error("Missing the required parameter 'userGroupBase' when calling updateUserGroup");
      }


      var pathParams = {
        'dn': dn
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyId', 'apiKeySecret', 'jwtAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'UserGroup';

      return this.apiClient.callApi(
        '/user/group/{dn}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
