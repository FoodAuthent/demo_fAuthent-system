/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/FaObjectSet', '../model/FileMetadata', '../model/FilePageResult', '../model/ImportResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FaObjectSet'), require('../model/FileMetadata'), require('../model/FilePageResult'), require('../model/ImportResult'));
  } else {
    // Browser globals (root is window)
    if (!root.FoodAuthentSwaggerApi) {
      root.FoodAuthentSwaggerApi = {};
    }
    root.FoodAuthentSwaggerApi.FileApi = factory(root.FoodAuthentSwaggerApi.ApiClient, root.FoodAuthentSwaggerApi.FaObjectSet, root.FoodAuthentSwaggerApi.FileMetadata, root.FoodAuthentSwaggerApi.FilePageResult, root.FoodAuthentSwaggerApi.ImportResult);
  }
}(this, function(ApiClient, FaObjectSet, FileMetadata, FilePageResult, ImportResult) {
  'use strict';

  /**
   * File service.
   * @module api/FileApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FileApi. 
   * @alias module:api/FileApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createFileMetadata operation.
     * @callback module:api/FileApi~createFileMetadataCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new file by posting the file metadata first.
     * @param {module:model/FileMetadata} fileMetadata The actual metadata object.
     * @param {module:api/FileApi~createFileMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.createFileMetadata = function(fileMetadata, callback) {
      var postBody = fileMetadata;

      // verify the required parameter 'fileMetadata' is set
      if (fileMetadata === undefined || fileMetadata === null) {
        throw new Error("Missing the required parameter 'fileMetadata' when calling createFileMetadata");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportFile operation.
     * @callback module:api/FileApi~exportFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a file
     * Export FoodAuthent components
     * @param {String} fileType 
     * @param {String} fileId 
     * @param {module:model/FaObjectSet} faObjectSet Specifies a set of fa-objects to be exported.
     * @param {module:api/FileApi~exportFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.exportFile = function(fileType, fileId, faObjectSet, callback) {
      var postBody = faObjectSet;

      // verify the required parameter 'fileType' is set
      if (fileType === undefined || fileType === null) {
        throw new Error("Missing the required parameter 'fileType' when calling exportFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling exportFile");
      }

      // verify the required parameter 'faObjectSet' is set
      if (faObjectSet === undefined || faObjectSet === null) {
        throw new Error("Missing the required parameter 'faObjectSet' when calling exportFile");
      }


      var pathParams = {
        'file-id': fileId
      };
      var queryParams = {
        'file-type': fileType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/binary'];
      var returnType = 'File';

      return this.apiClient.callApi(
        '/file/{file-id}/export', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFiles operation.
     * @callback module:api/FileApi~getAllFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilePageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the files
     * Returns the all the files metadata.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber the page number starting at 1
     * @param {Number} opts.pageSize entries per page, minimum 1
     * @param {Array.<String>} opts.keywords Keywords to search for
     * @param {module:api/FileApi~getAllFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilePageResult}
     */
    this.getAllFiles = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
        'keywords': {
          value: opts['keywords'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'FilePageResult';

      return this.apiClient.callApi(
        '/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileData operation.
     * @callback module:api/FileApi~getFileDataCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Let one download the actual file data.
     * @param {String} fileId 
     * @param {module:api/FileApi~getFileDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    this.getFileData = function(fileId, callback) {
      var postBody = null;

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileData");
      }


      var pathParams = {
        'file-id': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/binary'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/file/{file-id}/data', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileMetadata operation.
     * @callback module:api/FileApi~getFileMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the file metadata.
     * @param {String} fileId 
     * @param {module:api/FileApi~getFileMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileMetadata}
     */
    this.getFileMetadata = function(fileId, callback) {
      var postBody = null;

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileMetadata");
      }


      var pathParams = {
        'file-id': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'FileMetadata';

      return this.apiClient.callApi(
        '/file/{file-id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileSHA256 operation.
     * @callback module:api/FileApi~getFileSHA256Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sha256 checksum for file
     * @param {String} fileId 
     * @param {module:api/FileApi~getFileSHA256Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getFileSHA256 = function(fileId, callback) {
      var postBody = null;

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileSHA256");
      }


      var pathParams = {
        'file-id': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/file/{file-id}/sha256', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importFile operation.
     * @callback module:api/FileApi~importFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a ZIP file
     * Import FoodAuthent components from an existing ZIP file and return the ids of the components.
     * @param {String} fileId 
     * @param {module:api/FileApi~importFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportResult}
     */
    this.importFile = function(fileId, callback) {
      var postBody = null;

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling importFile");
      }


      var pathParams = {
        'file-id': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'ImportResult';

      return this.apiClient.callApi(
        '/file/{file-id}/import', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFileMetadataAndData operation.
     * @callback module:api/FileApi~removeFileMetadataAndDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the file and it&#39;s metadata for the given id
     * @param {String} fileId 
     * @param {module:api/FileApi~removeFileMetadataAndDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeFileMetadataAndData = function(fileId, callback) {
      var postBody = null;

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling removeFileMetadataAndData");
      }


      var pathParams = {
        'file-id': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/file/{file-id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveFileData operation.
     * @callback module:api/FileApi~saveFileDataCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads (and replaces) the actual file-data for the given file id
     * @param {String} fileId 
     * @param {File} filedata The binary file data.
     * @param {module:api/FileApi~saveFileDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.saveFileData = function(fileId, filedata, callback) {
      var postBody = null;

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling saveFileData");
      }

      // verify the required parameter 'filedata' is set
      if (filedata === undefined || filedata === null) {
        throw new Error("Missing the required parameter 'filedata' when calling saveFileData");
      }


      var pathParams = {
        'file-id': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'filedata': filedata
      };

      var authNames = ['jwtAuth'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/file/{file-id}/data', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
