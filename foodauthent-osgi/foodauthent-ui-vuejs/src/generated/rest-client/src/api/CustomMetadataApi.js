/**
 * FoodAuthent Swagger API
 * This is the FoodAuthent API Description [www.foodauthent.net]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@foodauthent.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FoodAuthentSwaggerApi) {
      root.FoodAuthentSwaggerApi = {};
    }
    root.FoodAuthentSwaggerApi.CustomMetadataApi = factory(root.FoodAuthentSwaggerApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * CustomMetadata service.
   * @module api/CustomMetadataApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CustomMetadataApi. 
   * @alias module:api/CustomMetadataApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCustomMetadata operation.
     * @callback module:api/CustomMetadataApi~getCustomMetadataCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the custom metadata for a specific model, schema and model-instance.
     * TODO
     * @param {module:model/String} modelType 
     * @param {String} schemaId 
     * @param {String} faId 
     * @param {module:api/CustomMetadataApi~getCustomMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getCustomMetadata = function(modelType, schemaId, faId, callback) {
      var postBody = null;

      // verify the required parameter 'modelType' is set
      if (modelType === undefined || modelType === null) {
        throw new Error("Missing the required parameter 'modelType' when calling getCustomMetadata");
      }

      // verify the required parameter 'schemaId' is set
      if (schemaId === undefined || schemaId === null) {
        throw new Error("Missing the required parameter 'schemaId' when calling getCustomMetadata");
      }

      // verify the required parameter 'faId' is set
      if (faId === undefined || faId === null) {
        throw new Error("Missing the required parameter 'faId' when calling getCustomMetadata");
      }


      var pathParams = {
        'model-type': modelType,
        'schema-id': schemaId,
        'fa-id': faId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/custommetadata/{model-type}/{schema-id}/{fa-id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomMetadataSchema operation.
     * @callback module:api/CustomMetadataApi~getCustomMetadataSchemaCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the json-schema for a given schema- and model-type.
     * TODO
     * @param {module:model/String} modelType 
     * @param {String} schemaId 
     * @param {module:api/CustomMetadataApi~getCustomMetadataSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getCustomMetadataSchema = function(modelType, schemaId, callback) {
      var postBody = null;

      // verify the required parameter 'modelType' is set
      if (modelType === undefined || modelType === null) {
        throw new Error("Missing the required parameter 'modelType' when calling getCustomMetadataSchema");
      }

      // verify the required parameter 'schemaId' is set
      if (schemaId === undefined || schemaId === null) {
        throw new Error("Missing the required parameter 'schemaId' when calling getCustomMetadataSchema");
      }


      var pathParams = {
        'model-type': modelType,
        'schema-id': schemaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/schema+json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/custommetadata/{model-type}/{schema-id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomMetadataSchemas operation.
     * @callback module:api/CustomMetadataApi~getCustomMetadataSchemasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all available schema ids for a model type.
     * TODO
     * @param {module:model/String} modelType 
     * @param {module:api/CustomMetadataApi~getCustomMetadataSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.getCustomMetadataSchemas = function(modelType, callback) {
      var postBody = null;

      // verify the required parameter 'modelType' is set
      if (modelType === undefined || modelType === null) {
        throw new Error("Missing the required parameter 'modelType' when calling getCustomMetadataSchemas");
      }


      var pathParams = {
        'model-type': modelType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = '[String]';

      return this.apiClient.callApi(
        '/custommetadata/{model-type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCustomMetadata operation.
     * @callback module:api/CustomMetadataApi~saveCustomMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds custom metadata for a specific model, schema and model-instance.
     * TODO
     * @param {module:model/String} modelType 
     * @param {String} schemaId 
     * @param {String} faId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/CustomMetadataApi~saveCustomMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveCustomMetadata = function(modelType, schemaId, faId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'modelType' is set
      if (modelType === undefined || modelType === null) {
        throw new Error("Missing the required parameter 'modelType' when calling saveCustomMetadata");
      }

      // verify the required parameter 'schemaId' is set
      if (schemaId === undefined || schemaId === null) {
        throw new Error("Missing the required parameter 'schemaId' when calling saveCustomMetadata");
      }

      // verify the required parameter 'faId' is set
      if (faId === undefined || faId === null) {
        throw new Error("Missing the required parameter 'faId' when calling saveCustomMetadata");
      }


      var pathParams = {
        'model-type': modelType,
        'schema-id': schemaId,
        'fa-id': faId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwtAuth'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/custommetadata/{model-type}/{schema-id}/{fa-id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
