/*
 * 1WorldSync Content1 API
 * Content1 will provide access to accurate, trusted product data sourced directly from the Brand Owners through 1WorldSyncâ€™s APIs. This full set of product information is readily available to you through a set of web services, allowing you to get up-to-date, complete product information. <br/><br/>The following APIs are available<ul><li>Product Search API - Performs a search against the product data published in ContentNOW to find products that meet the supplied criteria. For each search result displayed, a basic set of information about the product is provided. While performing a product search only a subset from the entire list of attributes for an item will be returned.</li><li>Product Fetch API - Once a Product Search has been performed, the full set of atrribute information on a given product can be retrieved using the Product Fetch API and the item reference id (obtained through the search).</li></ul><p>This tool features a fully functional form which will call the Content1 API in real time.  To unlock the API call, you must have your client secret key provided through <a href=\"#\" onclick=\"openWindow('https://developer.1worldsync.com', 'Content1')\">developer.1worldsync.com</a>. Enter that key in the top right of this page to unlock the API calls used below.</p><p>Don't have a key but want to read the documenation? Go ahead! Basic API documentation is provided below.</p><div style=\"border: 1px solid transparent;color:#fff;background-color: #00ACC8;padding-left: 10px;height:30px;font-weight:bold;font-size:1.3em;margin:0;font-family: ProximaNova;padding-top:10px\">Search and Fetch Model Schemas</div><ul><li><a href=\"../doc/1WorldSync_Content1_Product_Search_Model_Schema_Guide_v3.1.6.1.pdf\" target=\"_blank\">Search Model Schema</a></li><li><a href=\"../doc/1WorldSync_Content1_Product_Fetch_Model_Schema_Guide_v3.1.6.6.pdf\" target=\"_blank\">Fetch Model Schema</a> </li></ul>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.foodauthent.oneworldsync.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.foodauthent.oneworldsync.client.model.CodifiedValue;
import org.foodauthent.oneworldsync.client.model.LanguageLabels;
import org.foodauthent.oneworldsync.client.model.QualifiedValues;

/**
 * FlashPoint
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-25T20:10:55.785Z")
public class FlashPoint {
	@JsonProperty("flashPointDescriptor")
	private LanguageLabels flashPointDescriptor = null;

	@JsonProperty("flashPointTemperature")
	private QualifiedValues flashPointTemperature = null;

	@JsonProperty("flashPointTemperatureLowerValue")
	private QualifiedValues flashPointTemperatureLowerValue = null;

	@JsonProperty("flashPointTemperatureMeasurementPrecision")
	private CodifiedValue flashPointTemperatureMeasurementPrecision = null;

	@JsonProperty("flashPointTemperatureUpperValue")
	private QualifiedValues flashPointTemperatureUpperValue = null;

	@JsonProperty("flashPointTestMethodCode")
	private CodifiedValue flashPointTestMethodCode = null;

	public FlashPoint flashPointDescriptor(LanguageLabels flashPointDescriptor) {
		this.flashPointDescriptor = flashPointDescriptor;
		return this;
	}

	/**
	 * Get flashPointDescriptor
	 * 
	 * @return flashPointDescriptor
	 **/
	@ApiModelProperty(value = "")
	public LanguageLabels getFlashPointDescriptor() {
		return flashPointDescriptor;
	}

	public void setFlashPointDescriptor(LanguageLabels flashPointDescriptor) {
		this.flashPointDescriptor = flashPointDescriptor;
	}

	public FlashPoint flashPointTemperature(QualifiedValues flashPointTemperature) {
		this.flashPointTemperature = flashPointTemperature;
		return this;
	}

	/**
	 * Get flashPointTemperature
	 * 
	 * @return flashPointTemperature
	 **/
	@ApiModelProperty(value = "")
	public QualifiedValues getFlashPointTemperature() {
		return flashPointTemperature;
	}

	public void setFlashPointTemperature(QualifiedValues flashPointTemperature) {
		this.flashPointTemperature = flashPointTemperature;
	}

	public FlashPoint flashPointTemperatureLowerValue(QualifiedValues flashPointTemperatureLowerValue) {
		this.flashPointTemperatureLowerValue = flashPointTemperatureLowerValue;
		return this;
	}

	/**
	 * Get flashPointTemperatureLowerValue
	 * 
	 * @return flashPointTemperatureLowerValue
	 **/
	@ApiModelProperty(value = "")
	public QualifiedValues getFlashPointTemperatureLowerValue() {
		return flashPointTemperatureLowerValue;
	}

	public void setFlashPointTemperatureLowerValue(QualifiedValues flashPointTemperatureLowerValue) {
		this.flashPointTemperatureLowerValue = flashPointTemperatureLowerValue;
	}

	public FlashPoint flashPointTemperatureMeasurementPrecision(
			CodifiedValue flashPointTemperatureMeasurementPrecision) {
		this.flashPointTemperatureMeasurementPrecision = flashPointTemperatureMeasurementPrecision;
		return this;
	}

	/**
	 * Get flashPointTemperatureMeasurementPrecision
	 * 
	 * @return flashPointTemperatureMeasurementPrecision
	 **/
	@ApiModelProperty(value = "")
	public CodifiedValue getFlashPointTemperatureMeasurementPrecision() {
		return flashPointTemperatureMeasurementPrecision;
	}

	public void setFlashPointTemperatureMeasurementPrecision(CodifiedValue flashPointTemperatureMeasurementPrecision) {
		this.flashPointTemperatureMeasurementPrecision = flashPointTemperatureMeasurementPrecision;
	}

	public FlashPoint flashPointTemperatureUpperValue(QualifiedValues flashPointTemperatureUpperValue) {
		this.flashPointTemperatureUpperValue = flashPointTemperatureUpperValue;
		return this;
	}

	/**
	 * Get flashPointTemperatureUpperValue
	 * 
	 * @return flashPointTemperatureUpperValue
	 **/
	@ApiModelProperty(value = "")
	public QualifiedValues getFlashPointTemperatureUpperValue() {
		return flashPointTemperatureUpperValue;
	}

	public void setFlashPointTemperatureUpperValue(QualifiedValues flashPointTemperatureUpperValue) {
		this.flashPointTemperatureUpperValue = flashPointTemperatureUpperValue;
	}

	public FlashPoint flashPointTestMethodCode(CodifiedValue flashPointTestMethodCode) {
		this.flashPointTestMethodCode = flashPointTestMethodCode;
		return this;
	}

	/**
	 * Get flashPointTestMethodCode
	 * 
	 * @return flashPointTestMethodCode
	 **/
	@ApiModelProperty(value = "")
	public CodifiedValue getFlashPointTestMethodCode() {
		return flashPointTestMethodCode;
	}

	public void setFlashPointTestMethodCode(CodifiedValue flashPointTestMethodCode) {
		this.flashPointTestMethodCode = flashPointTestMethodCode;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		FlashPoint flashPoint = (FlashPoint) o;
		return Objects.equals(this.flashPointDescriptor, flashPoint.flashPointDescriptor)
				&& Objects.equals(this.flashPointTemperature, flashPoint.flashPointTemperature)
				&& Objects.equals(this.flashPointTemperatureLowerValue, flashPoint.flashPointTemperatureLowerValue)
				&& Objects.equals(this.flashPointTemperatureMeasurementPrecision,
						flashPoint.flashPointTemperatureMeasurementPrecision)
				&& Objects.equals(this.flashPointTemperatureUpperValue, flashPoint.flashPointTemperatureUpperValue)
				&& Objects.equals(this.flashPointTestMethodCode, flashPoint.flashPointTestMethodCode);
	}

	@Override
	public int hashCode() {
		return Objects.hash(flashPointDescriptor, flashPointTemperature, flashPointTemperatureLowerValue,
				flashPointTemperatureMeasurementPrecision, flashPointTemperatureUpperValue, flashPointTestMethodCode);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class FlashPoint {\n");

		sb.append("    flashPointDescriptor: ").append(toIndentedString(flashPointDescriptor)).append("\n");
		sb.append("    flashPointTemperature: ").append(toIndentedString(flashPointTemperature)).append("\n");
		sb.append("    flashPointTemperatureLowerValue: ").append(toIndentedString(flashPointTemperatureLowerValue))
				.append("\n");
		sb.append("    flashPointTemperatureMeasurementPrecision: ")
				.append(toIndentedString(flashPointTemperatureMeasurementPrecision)).append("\n");
		sb.append("    flashPointTemperatureUpperValue: ").append(toIndentedString(flashPointTemperatureUpperValue))
				.append("\n");
		sb.append("    flashPointTestMethodCode: ").append(toIndentedString(flashPointTestMethodCode)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
