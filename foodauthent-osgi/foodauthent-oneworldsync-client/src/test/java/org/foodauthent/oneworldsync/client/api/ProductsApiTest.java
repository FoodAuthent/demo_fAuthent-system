/*
 * 1WorldSync Content1 API
 * Content1 will provide access to accurate, trusted product data sourced directly from the Brand Owners through 1WorldSync’s APIs. This full set of product information is readily available to you through a set of web services, allowing you to get up-to-date, complete product information. <br/><br/>The following APIs are available<ul><li>Product Search API - Performs a search against the product data published in ContentNOW to find products that meet the supplied criteria. For each search result displayed, a basic set of information about the product is provided. While performing a product search only a subset from the entire list of attributes for an item will be returned.</li><li>Product Fetch API - Once a Product Search has been performed, the full set of atrribute information on a given product can be retrieved using the Product Fetch API and the item reference id (obtained through the search).</li></ul><p>This tool features a fully functional form which will call the Content1 API in real time.  To unlock the API call, you must have your client secret key provided through <a href=\"#\" onclick=\"openWindow('https://developer.1worldsync.com', 'Content1')\">developer.1worldsync.com</a>. Enter that key in the top right of this page to unlock the API calls used below.</p><p>Don't have a key but want to read the documenation? Go ahead! Basic API documentation is provided below.</p><div style=\"border: 1px solid transparent;color:#fff;background-color: #00ACC8;padding-left: 10px;height:30px;font-weight:bold;font-size:1.3em;margin:0;font-family: ProximaNova;padding-top:10px\">Search and Fetch Model Schemas</div><ul><li><a href=\"../doc/1WorldSync_Content1_Product_Search_Model_Schema_Guide_v3.1.6.1.pdf\" target=\"_blank\">Search Model Schema</a></li><li><a href=\"../doc/1WorldSync_Content1_Product_Fetch_Model_Schema_Guide_v3.1.6.6.pdf\" target=\"_blank\">Fetch Model Schema</a> </li></ul>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.foodauthent.oneworldsync.client.api;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.foodauthent.oneworldsync.client.ApiException;
import org.foodauthent.oneworldsync.client.model.InformationProviderOfTradeItem;
import org.foodauthent.oneworldsync.client.model.Item;
import org.foodauthent.oneworldsync.client.model.ItemIdentificationInformation;
import org.foodauthent.oneworldsync.client.model.LanguageLabel;
import org.foodauthent.oneworldsync.client.model.ManufacturerOfTradeItem;
import org.foodauthent.oneworldsync.client.model.Response;
import org.foodauthent.oneworldsync.client.model.Result;
import org.junit.Test;

import com.fasterxml.jackson.databind.util.ISO8601Utils;

/**
 * API tests for ProductsApi
 */
public class ProductsApiTest {

	private final ProductsApi api = new ProductsApi();

	/**
	 * &lt;p&gt;&lt;strong&gt;Product Search&lt;/strong&gt;&lt;/p&gt; &lt;p&gt; The
	 * search will get a pre-defined subset (~20 attributes) of information on
	 * products in the Content1 Repository. The Product Search request provides
	 * enough information to choose which product you would like to retrieve a full
	 * set of attributes to be used within your application or website.&lt;/p&gt;
	 *
	 * Content1 Search API will allow you to search using free text, category code,
	 * or advanced search options. The advanced search and filters can be used to
	 * narrow the numbers of products which are returned. The full list of available
	 * parameters which can be used to search or filter can be found by clicking on
	 * the corresponding hyperlink in the query paramter below.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void productsGetTest() throws ApiException {
		String appId = "6e987765";
		String searchType = "freeTextSearch";
		String query = "Olivenöl";
		String accessMdm = "computer";
		String TIMESTAMP = ISO8601Utils.format(new Date(), false);
		Integer rows = null;
		Integer start = null;
		String filter = null;
		String sortOrder = null;
		String sortColumn = null;
		String matchScore = null;
		String cursorMark = null;
		Double geoLocAccessLatd = null;
		Double geoLocAccessLong = null;
		Response response = api.productsGet(appId, searchType, query, accessMdm, TIMESTAMP, rows, start, filter,
				sortOrder, sortColumn, matchScore, cursorMark, geoLocAccessLatd, geoLocAccessLong);

		for (final Result r : response.getResults()) {
			final Item item = r.getItem();
			final ItemIdentificationInformation info = item.getItemIdentificationInformation();
			final List<LanguageLabel> deLabels = info.getProductName().getValues().stream().filter(l -> {
				return l.getLanguage().equals("de");
			}).collect(Collectors.toList());
			String productName = "";
			String brandOwner = "";
			String itemIdentifier = String.join(" ", info.getItemIdentifier().stream().map(i -> {
				return i.getItemIdType().getValue() + ":" + i.getItemId();
			}).collect(Collectors.toList()));
			if (!deLabels.isEmpty()) {
				productName = deLabels.get(0).getValue();
			}
			brandOwner = String.join(" ", item.getTradeItemInformation().stream().map(i -> {
				return String.join(" ",
						i.getTradeItemDescriptionModule().getTradeItemDescriptionInformation().stream().map(t -> {
							return t.getBrandNameInformation().getBrandName();
						}).collect(Collectors.toList()));
			}).collect(Collectors.toList()));
			System.out.println(brandOwner + ", " + productName + ", " + itemIdentifier);
		}
		// TODO: test validations
	}

	/**
	 * &lt;p&gt;&lt;strong&gt;Product Fetch&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; The
	 * fetch API returns the full set of attributes contianed in the Content1
	 * Repository.&lt;/p&gt;
	 *
	 * &lt;p&gt;The fetch API is used to return the full set of attributes for the
	 * product.Use the ItemReferenceId returned from the search to fetch that
	 * product. You can pass a playlist in the attrset field to limit the number of
	 * attributes returned that are relavent to your systems needs, reducing
	 * processing time and bandwidth.&lt;/p&gt;
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	public void productsItemReferenceIdGetTest() throws ApiException {
		String appId = null;
		String itemReferenceId = null;
		String accessMdm = null;
		String TIMESTAMP = null;
		Double geoLocAccessLatd = null;
		Double geoLocAccessLong = null;
		String attrset = null;
		Response response = api.productsItemReferenceIdGet(appId, itemReferenceId, accessMdm, TIMESTAMP,
				geoLocAccessLatd, geoLocAccessLong, attrset);

		// TODO: test validations
	}

}
