swagger: "2.0"
info:
  description: "This is the FoodAuthent API Description [www.foodauthent.net]"
  version: "1.0.0"
  title: "FoodAuthent Swagger API"
  termsOfService: "https://www.foodauthent.net/terms/"
  contact:
    email: "api@foodauthent.net"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v0/foodauthent"
tags:
- name: sop
  description: "All standard operating procedure endpoints."
- name: product
  description: "All product endpoints."
- name: fingerprint
  description: "All fingerprint/sample endpoints."
- name: workflow
  description: All workflow endpoints.
- name: model
  description: All model endpoints.
- name: tag
  description: All endpoints to deal with tags, i.e. query, delete, add, ...
- name: file
  description: All endpoint that deal with files.
schemes:
- https
- http
paths:
          
  /sop:
    get:
      tags:
        - sop
      summary: Finds SOPs by some key words or return all sop's.
      description: 'Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'
      operationId: findSOPByKeyword
      produces:
        - application/json
      parameters:
        - name: pageNumber
          type: integer
          in: query
        - name: pageSize
          type: integer
          in: query
        - name: keywords
          in: query
          description: Keywords to search for
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/SOPPageResult" 
        400:
          description: Invalid tag value
    post:
      tags:
        - sop
      summary: Creates a new SOP.
      description: TODO
      operationId: createNewSOP
      produces:
        - application/json
      parameters:
        - in: body
          name: sop
          description: TODO
          required: true
          schema:
            $ref: "#/definitions/SOP"
      responses:
        201:
          description: New sop created with the new sop-id returned.
          schema:
            type: string
            format: uuid

  /sop/{sop-id}:
    get:
      tags:
        - sop
      summary: Get the sop an id.
      description: TODO
      operationId: getSOPById
      produces:
        - application/json
      parameters:
        - name: sop-id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: The SOP.    
          schema:
            $ref: "#/definitions/SOP"         
 
  /file:
    post:
      tags:
        - file
      summary: Creates a new file by posting the file metadata first.
      description: TODO
      operationId: createFileMetadata
      consumes:
      - application/json
      parameters:
        - name: file-metadata
          description: The actual metadata object.
          in: body
          required: true
          schema:
            $ref: "#/definitions/FileMetadata"
      responses:
        201:
          description: New file metadata object created. Returns its fa-id (i.e. the file id)        
          schema:
            type: string
            format: uuid

  /file/{file-id}:
    get:
      tags:
       - file
      summary: Returns the file metadata.
      description: TODO
      operationId: getFileMetadata
      produces:
      - application/json
      parameters:
        - name: file-id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: The file metadata.
          schema:
            $ref: "#/definitions/FileMetadata"
            
  /file/{file-id}/data:
    get:
      tags:
       - file
      summary: Let one download the actual file data.
      description: TODO
      operationId: getFileData
      produces:
      - application/binary
      parameters:
        - name: file-id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: The file data.
          schema:
            type: file
    put:
      tags:
        - file
      summary: Uploads (and replaces) the actual file-data for the given file id
      description: TODO
      operationId: saveFileData
      consumes:
      - multipart/form-data
      parameters:
        - name: file-id
          in: path
          required: true
          type: string
          format: uuid
        - name: upfile
          in: formData
          type: file
          required: true
          description: The file to upload.
      responses:
        200:
          description: File data has been uploaded successfully. Returns the fa-id of the file (i.e. file-id)
          schema:
            type: string
            format: uuid      
        
  /fingerprintset:
    get:
      tags:
        - fingerprint
      summary: Finds fingerprint sets by some key words or return all fingerprint sets.
      description: 'Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'
      operationId: findFingerprintSetByKeyword
      produces:
        - application/json
      parameters:
        - name: keywords
          in: query
          description: Keywords to search for
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              type: string
              format: uuid
        400:
          description: Invalid tag value
    post:
      tags:
        - fingerprint 
      summary: Create a new fingerprint set.
      description: TODO
      operationId: createFingerprintSet
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: fingerprint-set
        description: A fingerprint set containing fingerprint metadata.
        required: true
        schema:
           $ref: "#/definitions/FingerprintSet"
      responses:
        201:
          description: The new id of the fingerprint set in the fa-system (fingerprint-set id)
          schema:
            type: string
            format: uuid
            
  /fingerprintset/{fingerprintset-id}:
    get:
      tags:
        - fingerprint
      summary: Get the fingerprintset by id.
      description: TODO
      operationId: getFingerprintSetById
      produces:
        - application/json
      parameters:
        - name: fingerprintset-id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: The fingerprint set.    
          schema:
            $ref: "#/definitions/FingerprintSet"
 
  /product:
    post:
      tags:
        - product
      summary: Create a new product entity. 
      description: TODO
      operationId: createProduct
      consumes:
      - application/json
      parameters:
      - in: body
        name: product
        description: TODO
        schema:
          $ref: "#/definitions/Product" 
      responses:
        201:
          description: Product has been created successfully and the new fa-id of the product is returned.
          schema:
            type: string
            format: uuid
             
  /product/findByGtin:
    get:
      tags:
        - product
      summary: Find product by gtin.
      description: TODO
      operationId: findProductByGtin
      produces:
      - application/json 
      parameters:
      - in: query
        name: gtin
        description: TODO
        required: true
        type: string
      responses:
        200:
          description: The found product.
          schema:
            $ref: "#/definitions/Product"
        404:
          description: Not found.
          
  /prediction/{prediction-id}:
    get:
      tags:
        - workflow
      summary: Get a specific prediction result.
      operationId: getPredictionResult
      parameters:
      - in: path
        name: prediction-id
        description: TODO
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: List of predictions.
          schema:
            $ref: "#/definitions/Prediction"

  /model:
    post:
      tags:
        - model
      summary: Creates/adds a new model.
      description: Creates/adds a new model.
      operationId: createModel
      consumes:
      - application/json
      parameters:
      - in: body
        name: model
        description: TODO
        schema:
          $ref: "#/definitions/Model" 
      responses:
        201:
          description: Model has been created successfully and the new fa-id of the model (model-id) is returned.
          schema:
            type: string
            format: uuid      

  /model/{model-id}:
    get:
      tags:
        - model
      summary: Get the model by id.
      description: TODO
      operationId: getModelById
      produces:
        - application/json
      parameters:
        - name: model-id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: The model.
          schema:
            $ref: "#/definitions/Model"
            
  /workflow:
    post:
      tags:
        - workflow
      summary: Creates/adds a new workflow.
      description: Creates/adds a new workflow.
      operationId: createWorkflow
      consumes:
      - application/json
      parameters:
      - in: body
        name: workflow
        description: TODO
        schema:
          $ref: "#/definitions/Workflow" 
      responses:
        201:
          description: Workflow has been created successfully and the new fa-id of the workflow is returned.
          schema:
            type: string
            format: uuid      

  /workflow/{workflow-id}:
    get:
      tags:
        - workflow
      summary: Get the workflow an id.
      description: TODO
      operationId: getWorkflowById
      produces:
        - application/json
      parameters:
        - name: workflow-id
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: The workflow.    
          schema:
            $ref: "#/definitions/Workflow"

  /workflow/training:
    get:
      tags:
        - workflow
      summary: Finds workflows by some key words or return all workflows suitable for training models.
      description: 'Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'
      operationId: findTrainingWorkflows
      produces:
        - application/json
      parameters:
        - name: keywords
          in: query
          description: Keywords to search for
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        200:
          description: successful search with a list of found workflow-ids
          schema:
            type: array
            items:
              type: string
              format: uuid
        400:
          description: Invalid search query value    
          x-exception: 
     
  /workflow/training/job:
    post:
      tags:
        - workflow
      summary: Starts creating a model for a set of fingerprints.
      operationId: createTrainingJob
      produces:
      - application/json
      parameters:
      - in: query
        name: workflow-id
        description: TODO
        required: true
        type: string
        format: uuid
      - in: query
        name: fingerprintset-id
        description: TODO
        required: true
        type: string
        format: uuid
      responses:
        201:
          description: The model training job as been created successfully.
          schema:
            $ref: "#/definitions/TrainingJob"
        500:
         description: Problem during job initialization.    
      x-fa-exceptions:
        - $ref: "#/x-fa-exceptions/InitJobException"
          code: 500
            
  /workflow/training/job/{job-id}:
    get:
      tags:
        - workflow
      summary: Lets one to ask for the status of a particular job.
      operationId: getTrainingJob
      produces:
      - application/json
      parameters:
      - in: path
        name: job-id
        description: TODO
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: The training job.
          schema:
            $ref: "#/definitions/TrainingJob"
 
  /workflow/prediction:
    get:
      tags:
        - workflow
      summary: Finds workflows by some key words or return all workflows suitable for prediction.
      description: 'Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'
      operationId: findPredictionWorkflows
      produces:
        - application/json
      parameters:
        - name: keywords
          in: query
          description: Keywords to search for
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        200:
          description: successful search with a list of found workflow-ids
          schema:
            type: array
            items:
              type: string
              format: uuid
 
  /workflow/prediction/job:
    post:
      tags:
        - workflow
      summary: Starts a prediction for a fingerprint.
      operationId: createPredictionJob
      produces:
      - application/json
      parameters:
      - in: query
        name: workflow-id
        description: TODO
        required: true
        type: string
        format: uuid
      - in: query
        name: fingerprintset-id
        description: TODO
        required: true
        type: string
        format: uuid
      - in: query
        name: model-id
        description: "The model to be used for prediction. Needs to be compatible with the selected workflow!!"
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: The prediction job.
          schema:
            $ref: "#/definitions/PredictionJob"  
        500:
         description: Problem during job initialization.    
      x-fa-exceptions:
        - $ref: "#/x-fa-exceptions/InitJobException"
          code: 500
        

  /workflow/prediction/job/{job-id}:
    get:
      tags:
        - workflow
      summary: Lets one to ask for the status of a particular job.
      operationId: getPredictionJob
      produces:
      - application/json
      parameters:
      - in: path
        name: job-id
        description: TODO
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: The prediction job.
          schema:
            $ref: "#/definitions/PredictionJob"

x-fa-exceptions:
  InitJobException:
    description: Exception thrown when a job could not be initialized.
    
definitions:
  SOPPageResult:
    type: object
    properties:
      pageNumber:
        type: integer
      pageCount:
        type: integer
      resultCount:
        type: integer
      results:
        type: array
        items:
          $ref: "#/definitions/SOP"

  SOP:
    type: object
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: ""
      file-id:
        description: Id referencing the file in the fa-system.
        type: string
        format: uuid
      name:
        description: A short SOP name
        type: string
      description:
        description: A short description of the sop
        type: string
      product-id:
        description: A reference to a product this sop is made for.
        type: string
        format: uuid
        example: ""
        
  FileMetadata:
    description: Metadata of a file in the FoodAuthent-system.
    type: object
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: ""
      type:
        description: The file type.
        type: string
        enum: [knime_workflow, knime_model, python_script, sop_pdf, fingerprints_bruker]
      name:
        description: "A name for the file."
        type: string
      uploadName:
        description: The name of the file as uploaded. Will be set automatically if left empty and a file is uploaded for the first time.
        type: string
      description:
        description: A more verbose description of the file.
        type: string
      author:
        description: The authors name (TODO - could reference a user in the future).
        type: string
      date:
        description: The creation date.
        type: string
        format: date
      uploadDate:
        description: Time and date of the file upload. Will be set automatically.
        type: string
        format: date
      version:
        description: The file's version.
        type: integer

  # should always be part of a fingerprint set
  Fingerprint:
    description: A fingerprint object representing its metadata.
    type: object
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: ""
      metadata:
        description: Placeholder for the actual metadata.
        type: string
        
  FingerprintSet:
    description: A set of fingerprints with its own id.
    type: object
    required:
      - file-id
      - product-id
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: "" 
      product-id:
        description: The fa-id of the product all fingerprints are associated with.
        type: string
        format: uuid
        example: ""
      fingerprints:
        description: The fingerprints.
        type: array
        items:
          $ref: "#/definitions/Fingerprint"
      file-id:
        description: Id referencing the fingerpint-set file.
        type: string
        format: uuid
      name:
        description: A human-readable name of the fingerprint set.
        type: string
      metadata:
        description: Placeholder for more (fixed) metadata (including device settings etc.).
          Possibly automatically determined upon creation of the fingerprint-set.
        type: string
      additional-properties:
        description: Key-value-map for additional properties.
        #string to string map
        type: object
        additionalProperties:
          type: string
        
  Model:
    description: A model created via training and used for prediction. Can also be a workflow.
    type: object
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: "" 
      name:
        description: A name for the model.
        type: string
      description:
        description: A more verbose description of the model.
        type: string
      author:
        description: The authors name (TODO - could reference a user in the future).
        type: string
      date:
        description: The creation date.
        type: string
        format: date
      version:
        description: The model's version.
        type: integer
      type:
        #TODO allow custom types that are not predefined
        description: The type of the model in order to be able to check for compatibility of the workflows using it.
        type: string
        # must be kept in sync with workflow.model-type
        enum: [knime_workflow, knime_python, pmml]
      tags:
        description: Descriptive tags/annotations for the model.
        type: array
        items:
          $ref: "#/definitions/Tag"
      file-id:
        description: id referencing the model file.
        type: string
        format: uuid
 
  Product: 
    description: Global product metadata, e.g., country of origin, etc. There can be multiple fingerprints for one product.
    type: object
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: ""
      gtin:
        type: string
      brand:
        type: string
        
  PredictionJob:
    description: Represents prediction job.
    type: object
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: ""
      prediction-id:
        description: The id of the prediction result if the job has completed successfully.
        type: string
        format: uuid
        example: ""
      status:
        description: The current status of the prediction job.
        type: string
        enum: [running, success, failed]
      status-message:
        description: A message, e.g., in case the workflow failed.
        type: string
  
  #predictions per fingerprint set!!
  Prediction:
    type: object
    properties:
     fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: ""
     confidence-map:
        description: The confidences for each fingerprint, mapped from the fingerprint-id.
        type: object
        #map from fa-id to confidence
        additionalProperties:
          type: number
          format: float
          maximum: 1
          minimum: 0
     workflow-id:
        description: Workflow used for the prediction.
        type: string
        format: uuid
        example: ""
     fingerprint-set-id:
        description: Id of the set the prediction has been done for.
        type: string
        format: uuid
        example: ""
     model-id:
        description: The model that has been used for the prediction.
        type: string
        format: uuid
        example: ""
        
  TrainingJob:
    description: Represents model training job.
    type: object
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: ""
      model-id:
        description: The created model after successful training.
        type: string
        format: uuid 
        example: ""
      status:
        type: string
        enum: [running, success, failed]
      status-message:
        description: A message, e.g., in case the workflow failed.
        type: string
 
        
  Tag:
    description: A tag/label for objects.
    type: object
    properties:
        fa-id:
         description: A global id within the FoodAuthent-system.
         type: string
         format: uuid
         example: ""
        name:
          description: A human-readable name
          type: string
        description:
          description: A more verbose description.
          type: string
        type:
          description: The type of the tag, e.g. whether it's a tag for a workflow, a model or a fingerprint.
          type: string
          enum: [workflow, model, fingerprint, sop]

  Workflow:
    type: "object"
    description: A workflow for a certain task.
    required:
      - type
      - file-id
      - name
      - representation
    properties:
      fa-id:
        description: A global id within the FoodAuthent-system.
        type: string
        format: uuid
        example: ""
      name:
        type: string
      description:
        type: string
      representation:
        description: The workflow representation, e.g. represented by a scripting language, cwl or a KNIME-workflow.
        type: string
        enum: [cwl, r, python, knime]
      type:
        #TODO allow custom types that are not predefined
        description: "The type of the workflow. IMPORTANT: This property determines the required workflow input and output, e.g., PredictionWorkflowInput and PredicitonWorkflowOutput-entity."
        type: string
        enum: [prediction_workflow, training_workflow]
      parameters:
        description: The parameters of the workflow, TODO - should maybe be a map.
        type: array
        items:
         $ref: "#/definitions/WorkflowParameter"
      tags:
        description: Descriptive tags/annotations for the workflow.
        type: array
        items:
          $ref: "#/definitions/Tag"
      file-id:
        description: id referencing the workflow file.
        type: string
        format: uuid
      modules:
        description: The workflow modules (including their parameters) required by this workflow or empty (or null) if none required.
        type: array
        items:
          $ref: "#/definitions/WorkflowModule"
      model-type:
        description: Type of the model this workflow can consume or produce. Can be left empty, e.g., in case of a preprocessing workflow. Model type must match one of the model's type property.
        type: string
        # must be kept in sync with model.type
        enum: [knime_workflow, knime_python, pmml]
          
  WorkflowModule:
    description: A workflow module used by other workflows (i.e. like a sub-workflow).
    type: object
    x-no-faid: true
    properties:
      file-id:
        description: The file-id that references the actual workflow file.
        type: string
        format: uuid
      module-type:
        # TODO allow custom types
        description: "The type of the module. IMPORTANT: This property determines the required workflow input and output."
        type: string
        enum: [read, transform_signal, binning, transform_sample, predict, train]
      module-parameters:
        description: The parameters required for the module.
        type: array
        items:
          $ref: "#/definitions/WorkflowParameter" 
      
  WorkflowParameter:
    type: object
    description: Represents a workflow parameter.
    x-no-faid: true
    properties:
      name:
        description: the parameter name
        type: string
      required:
        description: whether the parameter is required
        type: boolean
      type:
        description: the parameter type
        type: string
        enum: [string, number]
      value:
        description: the parameter value
        type: string
        
        
# Inputs and outputs for different workflow (and workflow module) types (see type-property of the workflow entity).
# Not used by any endpoint but as entity directly!
# Changes here might cause (test) workflows to not work anymore.

  PredictionWorkflowInput:
    description: Describes the input required by a prediction workflow.
    type: object
    x-no-faid: true
    properties:
      parameters:
        description: The workflow parameters as given provided by the Workflow-entity.
        type: array
        items:
          $ref: "#/definitions/WorkflowParameter"
      fingerprintset-metadata:
        description: The fingerprint set metadata.
        $ref: "#/definitions/FingerprintSet"
      fingerprintset-URI:
        description: URI pointing to the resource containg the fingerprints to predict the labels for. 
        type: string
        format: uri
      model-URI:
        description: optional model uri (if required by the workflow) pointing to the model to use
        type: string
        format: uri
      module-inputs:
        description: optional list of modules used within the prediction workfow.
        type: array
        items:
          $ref: "#/definitions/WorkflowModuleInput"
  
  PredictionWorkflowOutput:
    description:  Describes the outputs delivered by a prediction workflow.
    type: object
    x-no-faid: true
    properties:
      confidence-map:
        description: The confidences for each fingerprint, mapped from the fingerprint-id.
        type: object
        #map from fa-id to confidence
        additionalProperties:
          type: number
          format: float
          maximum: 1
          minimum: 0
          
          
  TrainingWorkflowInput:
    description: Describes the input required by a training workflow.
    type: object
    x-no-faid: true
    properties:
      parameters:
        description: The workflow parameters as given provided by the Workflow-entity.
        type: array
        items:
          $ref: "#/definitions/WorkflowParameter"
      fingerprintset-metadata:
        description: The fingerprint set metadata.
        $ref: "#/definitions/FingerprintSet"
      fingerprintset-URI:
        description: URI pointing to the resource containg the fingerprints to learn the model from. 
        type: string
        format: uri
      module-inputs:
        description: optional list of modules used within the training workfow.
        type: array
        items:
          $ref: "#/definitions/WorkflowModuleInput"
  
  TrainingWorkflowOutput:
    description:  Describes the outputs delivered by a training workflow.
    type: object
    x-no-faid: true
    properties:
      model-uri:          
        description: URI pointing to the created model file.
        type: string
        format: uri
        
  WorkflowModuleInput:
    description: Input for a workflow module.
    type: object
    x-no-faid: true
    properties:
      workflow-URI:
        description: URI of the workflow to use.
        type: string
        format: uri
      module-type:
        # TODO allow custom types
        description: "The type of the module."
        type: string
        # need to be kept in sync with WorkflowModule.module-type
        enum: [read, transform_signal, binning, transform_sample, predict, train]
      module-parameters:
        description: The parameters required for the module.
        type: array
        items:
          $ref: "#/definitions/WorkflowParameter" 
 
