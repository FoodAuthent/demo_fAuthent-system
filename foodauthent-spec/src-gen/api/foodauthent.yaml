openapi: 3.0.0
info:
  description: 'This is the FoodAuthent API Description [www.foodauthent.net]'
  version: 1.0.0
  title: FoodAuthent Swagger API
  termsOfService: 'https://www.foodauthent.net/terms/'
  contact:
    email: api@foodauthent.net
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: info
    description: Statistics, status, system info etc.
  - name: sop
    description: All standard operating procedure endpoints.
  - name: product
    description: All product endpoints.
  - name: fingerprint
    description: All fingerprint/sample endpoints.
  - name: workflow
    description: All workflow endpoints.
  - name: model
    description: All model endpoints.
  - name: tag
    description: 'All endpoints to deal with tags, i.e. query, delete, add, ...'
  - name: file
    description: All endpoint that deal with files.
  - name: entity
    description: Generic endpoint to deal with all kinds fa-entities (workflows, models, files, ...)
  - name: custom-metadata
    description: Endpoints that deal with custom metadata.
  - name: authentication
    description: Authentication endpoint.
  - name: user
    description: All user related endpoints.
  - name: organization
    description: All organization related endpoints.
  - name: ObjectEvent
    description: All ObjectEvent related endpoints.
  - name: Transaction
    description: All Transaction related endpoints.
  - name: relation
    description: Find entities by foreign key relationships
    
paths:

  /info:
    get:
      tags:
        - info 
      summary: FA-system statistics and status
      description: statistics and status
      operationId: getInfo
      responses:
        '200':
          description: success with the status and stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemInfo"
                
  /entity/{fa-id}:
    delete:
      tags:
        - entity
      description: Delete an fa-entity with specified by id (files or models).
      operationId: removeEntity
      parameters:
        - name: fa-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: entity successfully deleted.
      
  /sop:
    get:
      tags:
        - sop
      summary: Finds SOPs by some key words or return all sop's.
      description: >-
        Muliple tags can be provided with comma separated strings. Use keyword1,
        keyword2, keyword3 for testing. If no keyword is specified, all entries
        will be considered.
      operationId: findSOPByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOPPageResult'
    post:
      tags:
        - sop
      description: Creates a new SOP.
      operationId: createNewSOP
      responses:
        '201':
          description: New sop created with the new sop-id returned.
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SOP'
        description: TODO
        required: true

  '/sop/{sop-id}':
    get:
      tags:
        - sop
      description: Get the sop an id.
      operationId: getSOPById
      parameters:
        - name: sop-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The SOP.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SOP'
  /file:
    get:
      tags:
        - file
      summary: Returns all the files
      description: Returns the all the files metadata.
      operationId: getAllFiles
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePageResult'
    post:
      tags:
        - file
      description: Creates a new file by posting the file metadata first.
      operationId: createFileMetadata
      responses:
        '201':
          description: >-
            New file metadata object created. Returns its fa-id (i.e. the file
            id)
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileMetadata'
        description: The actual metadata object.
        required: true

  '/file/{file-id}':
    get:
      tags:
        - file
      description: Returns the file metadata.
      operationId: getFileMetadata
      parameters:
        - name: file-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The file metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
    delete:
      tags:
        - file
      description: Removes the file and it's metadata for the given id
      operationId: removeFileMetadataAndData
      parameters:
        - name: file-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: File metadata and data successfully removed.

  '/file/{file-id}/import':
    get:
      tags:
      - file
      summary: Import a ZIP file
      description: >-
        Import FoodAuthent components from an existing ZIP file and return the
        ids of the components.
      operationId: importFile
      parameters:
      - name: file-id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResult'
                
  '/file/{file-id}/export':
    post:
      tags:
      - file
      summary: Import a file
      description: >-
        Export FoodAuthent components
      operationId: exportFile
      parameters:
      - name: file-type
        in: query
        required: true
        schema:
          type: string
      - name: file-id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaObjectSet'
        description: Specifies a set of fa-objects to be exported.
        required: true
      responses:
        '200':
          description: The exported file data.
          content:
            application/binary:
              schema:
                type: string
                format: binary

  
  '/file/{file-id}/data':
    get:
      tags:
        - file
      description: Let one download the actual file data.
      operationId: getFileData
      parameters:
        - name: file-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The file data.
          content:
            application/binary:
              schema:
                type: string
                format: byte
    put:
      tags:
        - file
      description: Uploads (and replaces) the actual file-data for the given file id
      operationId: saveFileData
      parameters:
        - name: file-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: >-
            File data has been uploaded successfully. Returns the fa-id of the
            file (i.e. file-id)
          content:
            application/json:
              schema:
                type: string
                format: uuid
        #TODO fix response codes!!
        '433':
          $ref: "#/components/responses/InvalidData" 
        '434':
          $ref: "#/components/responses/InvalidInput"
        '500':
          $ref: "#/components/responses/FAException"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/File"
              
  /fingerprint:
    get:
      tags:
        - fingerprint
      summary: Finds fingerprint by some key words or return all fingerprint.
      description: >-
        Muliple keywords can be provided with comma separated strings,e.g. use keyword1,
        keyword2, keyword3.
      operationId: findFingerprintByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FingerprintPageResult'
    post:
      tags:
        - fingerprint
      description: Create a new fingerprint.
      operationId: createFingerprint
      responses:
        '201':
          description: >-
            The new id of the fingerprint in the fa-system (fingerprint-id)
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fingerprint'
        description: A fingerprint set containing fingerprint metadata.
        required: true

  '/fingerprint/{fingerprint-id}':
    get:
      tags:
        - fingerprint
      description: Get the fingerprint by id.
      operationId: getFingerprintById
      parameters:
        - name: fingerprint-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The fingerprint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fingerprint'

  /fingerprintset:
    get:
      tags:
        - fingerprint
      summary: Finds fingerprint sets by some key words or return all fingerprint sets.
      description: >-
        Muliple keywords can be provided with comma separated strings,e.g. use keyword1,
        keyword2, keyword3.
      operationId: findFingerprintSetByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FingerprintSetPageResult'
    post:
      tags:
        - fingerprint
      description: Create a new fingerprint set.
      operationId: createFingerprintSet
      responses:
        '201':
          description: >-
            The new id of the fingerprint set in the fa-system (fingerprint-set
            id)
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FingerprintSet'
        description: A fingerprint set containing fingerprint metadata.
        required: true

  '/fingerprintset/{fingerprintset-id}':
    get:
      tags:
        - fingerprint
      description: Get the fingerprintset by id.
      operationId: getFingerprintSetById
      parameters:
        - name: fingerprintset-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The fingerprint set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FingerprintSet'

  /product:
    get:
      tags:
        - product
      summary: Finds Products by some key words or return all Products.
      description: >-
        Muliple keywords can be provided with comma separated strings, e.g, keyword1, keyword2.
      operationId: findProductByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPageResult'
    post:
      tags:
        - product
      description: Create a new product entity.
      operationId: createProduct
      responses:
        '201':
          description: >-
            Product has been created successfully and the new fa-id of the
            product is returned.
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: TODO
    put:
      tags:
        - product
      summary: update a new product entity.
      description: TODO
      operationId: updatedProduct
      responses:
        '200':
          description: SOP successfully updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: TODO
  
  /product/findByGtin:
    get:
      tags:
        - product
      description: Find product by gtin.
      operationId: findProductByGtin
      parameters:
        - in: query
          name: gtin
          description: The gtin to find the product for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The found product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: TODO, add response reference
  
  /product/{product-id}:
    get:
      tags:
        - product
      description: Gets product by id.
      operationId: getProductById
      parameters:
        - in: path
          name: product-id
          description: The id to get the product for.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The found product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: TODO, add response reference

  /prediction:
    get:
      tags:
        - workflow
      summary: Finds Prediction by some key words or return all Predictions.
      description: >-
        Muliple keywords can be provided with comma separated strings, e.g. keyword1, keyword2.
      operationId: findPredictionByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionPageResult'
                
  '/prediction/relation/{fingerprintset-id}':
    get:
      tags:
        - workflow 
      description: get predictions (filtered by keywords) for a specific fingerprint set
      operationId: findPredictionsByFingerprintSetId
      parameters:
        - name: fingerprintset-id
          required: true
          in: path
          schema:
            type: string
            format: uuid
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionPageResult'

  '/prediction/{prediction-id}':
    get:
      tags:
        - workflow
      summary: Get a specific prediction result.
      operationId: getPredictionResult
      parameters:
        - in: path
          name: prediction-id
          description: TODO
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of predictions.
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Prediction'
  /model:
    get:
      tags:
        - model
      summary: Finds Models by some key words or return all Models.
      description: >-
        Muliple keywords can be provided with comma separated strings, e.g. keyword1, keyword2.
      operationId: findModelByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelPageResult'
    post:
      tags:
        - model
      summary: Creates/adds a new model.
      description: Creates/adds a new model.
      operationId: createModel
      responses:
        '201':
          description: >-
            Model has been created successfully and the new fa-id of the model
            (model-id) is returned.
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
        description: TODO

  '/model/{model-id}':
    get:
      tags:
        - model
      summary: Get the model by id.
      description: TODO
      operationId: getModelById
      parameters:
        - name: model-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'

  /workflow:
    get:
      tags:
        - workflow
      summary: Finds Workflow by some key words or return all Workflows.
      description: >-
        Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findWorkflowByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowPageResult'
    post:
      tags:
        - workflow
      summary: Creates/adds a new workflow.
      description: Creates/adds a new workflow.
      operationId: createWorkflow
      responses:
        '201':
          description: >-
            Workflow has been created successfully and the new fa-id of the
            workflow is returned.
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
        description: TODO

  '/workflow/{workflow-id}':
    get:
      tags:
        - workflow
      summary: Get the workflow an id.
      description: TODO
      operationId: getWorkflowById
      parameters:
        - name: workflow-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The workflow.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'

  /workflow/training:
    get:
      tags:
        - workflow
      summary: >-
        Finds workflows by some key words or return all workflows suitable for
        training models.
      description: >-
        Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findTrainingWorkflows
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowPageResult'

  /workflow/training/job:
    get:
      tags:
        - workflow
      summary: Finds training jobs by some key words or return all training jobs.
      description: >-
        Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findTrainingJobs
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingJobPageResult'
    post:
      tags:
        - workflow
      summary: Starts creating a model for a set of fingerprints.
      operationId: createTrainingJob
      parameters:
        - in: query
          name: workflow-id
          description: TODO
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fingerprintset-ids
          description: >
            One or more fingerprintset-ids referencing the fingerprint sets to learn
            the model on. Each fingerprintset represents one class!
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
        - in: query
          name: async
          description: >-
            Whether to run the workflow asynchronously
          required: false
          schema:
            type: boolean
      responses:
        '201':
          description: The model training job as been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingJob'
        '500':
          $ref: "#/components/responses/InitJobFailed"

  '/workflow/training/job/{job-id}':
    get:
      tags:
        - workflow
      summary: Lets one to ask for the status of a particular job.
      operationId: getTrainingJob
      parameters:
        - in: path
          name: job-id
          description: TODO
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The training job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingJob'

  /workflow/prediction:
    get:
      tags:
        - workflow
      summary: >-
        Finds workflows by some key words or return all workflows suitable for
        prediction.
      description: >-
        Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPredictionWorkflows
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowPageResult'

  /workflow/prediction/job:
    get:
      tags:
        - workflow
      summary: >-
        Finds predictions jobs by some key words or return all predictions jobs
        suitable for prediction.
      description: >-
        Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPredictionJobs
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionJobPageResult'
    post:
      tags:
        - workflow
      summary: Starts a prediction for a fingerprint.
      operationId: createPredictionJob
      parameters:
        - in: query
          name: workflow-id
          description: TODO
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fingerprintset-id
          description: TODO
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: model-id
          description: >-
            The model to be used for prediction. Needs to be compatible with the
            selected workflow!!
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: async
          description: >-
            Whether to run the workflow asynchronously
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: The prediction job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionJob'
        '500':
          $ref: "#/components/responses/InitJobFailed"

  '/workflow/prediction/job/{job-id}':
    get:
      tags:
        - workflow
      summary: Lets one to ask for the status of a particular job.
      operationId: getPredictionJob
      parameters:
        - in: path
          name: job-id
          description: TODO
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The prediction job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionJob'
                
  /authenticate/jwt:
    post:
      tags:
        - authentication
      summary: Authenticate user.
      description: TODO
      operationId: authenticateUserJSONWebToken
      responses:
        200:
          description: JSON Web Token for authenticated user successfully.
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthenticationRequest'
        description: TODO
        required: true
      "security": []

  /authenticate/jwt/verify:
    post:
      tags:
        - authentication
      summary: verify JSON Web Token.
      description: TODO
      operationId: verifyJSONWebToken
      responses:
        200:
          description: Token verified successfully.
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        description: JWT token to be verfied
        required: true   
        content:     
          text/plain:
            schema:
              type: string
      "security": []

  /authenticate/jwt/refresh:
    post:
      tags:
        - authentication
      summary: refresh JSON Web Token to extend expirtation time
      description: TODO
      operationId: refreshJSONWebToken
      responses:
        200:
          description: Updated JSON Web Token for authenticated user's token.
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        description: User's JSON Web Token to refresh
        required: true   
        content:     
          text/plain:
            schema:
              type: string
      "security": []

            
  /user:
    post:
      tags:
        - user
      summary: create new user.
      description: TODO
      operationId: createUser
      responses:
        200:
          description: details of successfully created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        409:
          $ref: "#/components/responses/ModelAlreadyExistsResponse" 
        415:
          $ref: "#/components/responses/InvalidOperationResponse"
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        description: TODO
        required: true
      "security": []


  /user/{dn}:        
    get:
      tags:
        - user
      summary: get existing user.
      description: TODO
      operationId: getUser
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The user's LDAP dn     
      responses:
        200:
          description: User details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        500:
          $ref: "#/components/responses/FAException"    

    put:
      tags:
        - user
      summary: update existing user.
      description: TODO
      operationId: updateUser
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The user's LDAP dn           
      responses:
        200:
          description: updated user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse"
        415:
          $ref: "#/components/responses/InvalidOperationResponse"
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBase'
        description: TODO
        required: true   

    delete:
      tags:
        - user
      summary: delete existing user.
      description: TODO
      operationId: deleteUser
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The user's LDAP dn     
      responses:
        200:
          description: User deleted.
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        415:
          $ref: "#/components/responses/InvalidOperationResponse"
        500:
          $ref: "#/components/responses/FAException"  

  /user/{dn}/pwgen:        
    get:
      tags:
        - user
      summary: generate password for user.
      description: TODO
      operationId: generatePassword
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The user's LDAP dn    
        - in: query
          name: length
          required: false 
          schema:
            type: integer
          description: length of generated password     
      responses:
        200:
          description: new password
          content:
            text/plain:
              schema:
                type: string        
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        500:
          $ref: "#/components/responses/FAException" 
      "security": [] 

  /user/{dn}/pwset:        
    post:
      tags:
        - user
      summary: set password for user.
      description: TODO
      operationId: setPassword
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The user's LDAP dn
      responses:
        200:
          description: new password was set
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        500:
          $ref: "#/components/responses/FAException"  
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        description: TODO
        required: true 
      "security": []  

  /user/group:
    post:
      tags:
        - user
      summary: create new user group.
      description: TODO
      operationId: createUserGroup
      responses:
        200:
          description: details of successfully created user group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        409:
          $ref: "#/components/responses/ModelAlreadyExistsResponse" 
        415:
          $ref: "#/components/responses/InvalidOperationResponse"                    
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupCreateRequest'
        description: TODO
        required: true

  /user/group/{dn}:        
    get:
      tags:
        - user
      summary: get existing user group.
      description: TODO
      operationId: getUserGroup
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The user group's LDAP dn     
      responses:
        200:
          description: User group details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        500:
          $ref: "#/components/responses/FAException"    

    put:
      tags:
        - user
      summary: update existing user group.
      description: TODO
      operationId: updateUserGroup
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The user group's LDAP dn           
      responses:
        200:
          description: updated user group details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        415:
          $ref: "#/components/responses/InvalidOperationResponse"                    
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupBase'
        description: TODO
        required: true   

    delete:
      tags:
        - user
      summary: delete existing user group.
      description: TODO
      operationId: deleteUserGroup
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The user group's LDAP dn     
      responses:
        200:
          description: User deleted.
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        415:
          $ref: "#/components/responses/InvalidOperationResponse"
        500:
          $ref: "#/components/responses/FAException"  

  /organization:
    post:
      tags:
        - organization
      summary: create new organization.
      description: TODO
      operationId: createOrganization
      responses:
        200:
          description: details of successfully created organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        409:
          $ref: "#/components/responses/ModelAlreadyExistsResponse" 
        415:
          $ref: "#/components/responses/InvalidOperationResponse"          
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreateRequest'
        description: TODO
        required: true

  /organization/{dn}:        
    get:
      tags:
        - organization
      summary: get existing organization.
      description: TODO
      operationId: getOrganization
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The organization's LDAP dn     
      responses:
        200:
          description: Organization details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        500:
          $ref: "#/components/responses/FAException"    

    put:
      tags:
        - organization
      summary: update existing organization.
      description: TODO
      operationId: updateOrganization
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The organization's LDAP dn     
      responses:
        200:
          description: updated organization details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        415:
          $ref: "#/components/responses/InvalidOperationResponse"          
        500:
          $ref: "#/components/responses/FAException"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationBase'
        description: TODO
        required: true   
        
    delete:
      tags:
        - organization
      summary: delete existing organization.
      description: TODO
      operationId: deleteOrganization
      parameters:
        - in: path
          name: dn
          required: true 
          schema:
            type: string
          description: The organization's LDAP dn     
      responses:
        200:
          description: Organization deleted.
        401:
          $ref: "#/components/responses/UnauthorizedResponse" 
        403:
          $ref: "#/components/responses/ForbiddenAccessResponse" 
        404:
          $ref: "#/components/responses/ModelNotFoundResponse" 
        415:
          $ref: "#/components/responses/InvalidOperationResponse"
        500:
          $ref: "#/components/responses/FAException"    

                          
  '/custommetadata/{model-type}':
    get:
      tags:
        - custom-metadata
      summary: Returns all available schema ids for a model type.
      description: >-
        TODO
      operationId: getCustomMetadataSchemas
      parameters:
        - $ref: "#/components/parameters/model-type"
      responses:
        '200':
          description: The list of schema-ids available for this type of entity.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                
  '/custommetadata/{model-type}/{schema-id}':
    get:
      tags:
        - custom-metadata
      summary: Returns the json-schema for a given schema- and model-type.
      description: >-
        TODO
      operationId: getCustomMetadataSchema
      parameters:
        - $ref: "#/components/parameters/model-type"
        - $ref: "#/components/parameters/schema-id"
      responses:
        '200':
          description: TODO
          content:
            application/schema+json:
              schema:
                type: string 
                
  '/custommetadata/{model-type}/{schema-id}/{fa-id}':
    get:
      tags:
        - custom-metadata
      summary: Returns the custom metadata for a specific model, schema and model-instance.
      description: >-
        TODO
      operationId: getCustomMetadata
      parameters:
        - $ref: "#/components/parameters/model-type"
        - $ref: "#/components/parameters/schema-id"
        - in: path
          name: fa-id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                type: string 
    post:
      tags:
        - custom-metadata
      summary: Adds custom metadata for a specific model, schema and model-instance.
      description: >-
        TODO
      operationId: saveCustomMetadata
      parameters:
        - $ref: "#/components/parameters/model-type"
        - $ref: "#/components/parameters/schema-id"
        - in: path
          name: fa-id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Custom metadata successfully added
      requestBody:
        content:
          application/json:
            schema:
              description: The object representing the custom metadata for a model with the given fa-id.
              type: string
                
  /epcis/objectEvent/:
    get:
      tags:
        - ObjectEvent
      summary: Finds Object Event by epcClass or return all Object Events.
      description: >-
        Muliple keywords(epcClass) can be provided with comma separated strings, e.g, keyword1, keyword2.
      operationId: findObjectEventByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectEventPageResult'
    post:
      tags:
        - ObjectEvent
      summary: Creates/adds a new ObjectEvent.
      description: Creates/adds a new ObjectEvent.
      operationId: createObjectEvent
      responses:
        '201':
          description: >-
            ObjectEvent has been created successfully and the new fa-id of the ObjectEvent
            is returned.
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectEvent'
        description: TODO
        
  '/epcis/objectEvent/{objectevent-id}':
    get:
      tags:
        - ObjectEvent
      description: Get the ObjectEvent an id.
      operationId: getObjectEventById
      parameters:
        - name: objectevent-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The ObjectEvent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectEvent'
                
  /discovery/transaction:
    get:
      tags:
        - Transaction
      summary: Finds transaction by keywords or return all transactions.
      description: >-
        Muliple keywords can be provided with comma separated strings, e.g, keyword1, keyword2.
      operationId: findTransactionByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryServiceTransactionPageResult'
    post:
      tags:
        - Transaction
      summary: Creates/adds a new Transaction.
      description: Creates/adds a new Transaction.
      operationId: createTransaction
      responses:
        '201':
          description: >-
            Transaction has been created successfully and the new fa-id of the ObjectEvent
            is returned.
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryServiceTransaction'
        description: TODO
        
  '/discovery/transaction/{transaction-id}':
    get:
      tags:
        - Transaction
      description: Get the Transaction an id.
      operationId: getTransactionById
      parameters:
        - name: transaction-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The Transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryServiceTransaction'
                
  '/discovery/transaction/findTransactionByFilter':
    post:
      tags:
        - Transaction
      description: Find Transaction by filters
      operationId: findTransactionByFilter
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryServiceTransactionPageResult'
        '404':
          description: TODO, add response reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoveryServiceSearchFilter'

                      
                      
  /relation/entities:
    get:
      tags:
        - relation
      summary: get entities with support for foreign key relationships
      operationId: getEntities
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string                  
        
  /relation/entity/{entity-name}:
    get:
      tags:
        - relation
      summary: get supported foreign key relations for entity
      operationId: getSupportedEntities
      parameters:
        - in: path
          name: entity-name
          description: root entity name.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                  
  /relation/entity/{entity-name}/{fa-id}/{referenced-entity}:
    get:
      tags:
        - relation
      summary: get supported foreign key relations for entity
      operationId: getForeignKeyEntities
      parameters:
        - in: path
          name: entity-name
          description: root entity name.
          required: true
          schema:
            type: string
        - in: path
          name: fa-id
          description: fa-id to match with in referenced entities.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: referenced-entity
          description: root entity name.
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                                    
  /sample:
    get:
      tags:
        - Sample
      summary: Finds sample by keywords or return all transactions.
      description: >-
        Muliple keywords can be provided with comma separated strings, e.g, keyword1, keyword2.
      operationId: findSampleByKeyword
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/keywords"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamplePageResult'
    post:
      tags:
        - Sample
      summary: Creates/adds a new Sample.
      description: Creates/adds a new Sample.
      operationId: createSample
      responses:
        '201':
          description: >-
            Sample has been created successfully and the new fa-id of the ObjectEvent
            is returned.
          content:
            application/json:
              schema:
                type: string
                format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sample'
        description: TODO
        
  '/sample/{sample-id}':
    get:
      tags:
        - Sample
      description: Get the Sample an id.
      operationId: getSampleById
      parameters:
        - name: sample-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The Sample.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
        
servers:
  - url: /v0/foodauthent

components:
  parameters:
    pageNumber:
      description: the page number starting at 1
      name: pageNumber
      in: query
      schema:
        type: integer
    pageSize: 
      description: entries per page, minimum 1
      name: pageSize
      in: query
      schema:
        type: integer
    keywords:
      name: keywords
      in: query
      description: Keywords to search for
      required: false
      explode: true
      schema:
        type: array
        items:
          type: string
    model-type:
      name: model-type
      in: path
      required: true
      schema:
        enum:
          - product
          - sample
          - sop
    schema-id:
      name: schema-id
      in: path
      required: true
      schema:
        type: string               

  responses:
    FAException:
      description: Unspecified exception.
      x-fa-exceptions:
        - name: FAException
    InvalidInput:
      description: Invalid input was provided.
      x-fa-exceptions:
        - name: InvalidInputException
    InitJobFailed:
      description: Exception thrown when a job could not be initialized.
      x-fa-exceptions:
        - name: InitJobException
    InvalidData:
      description: Invalid data was uploaded.
      x-fa-exceptions:
        - name: InvalidDataException
    ModelAlreadyExistsResponse:
      description: Invalid input was provided, model already exists.
      content:
        text/plain:
          schema:
            type: string        
      x-fa-exceptions:
        - name: ModelAlreadyExistsResponse
    ModelNotFoundResponse:
      description: Response thrown when an model could not be found.
      content:
        text/plain:
          schema:
            type: string        
      x-fa-exceptions:
        - name: ModelNotFoundResponse
    ForbiddenAccessResponse:
      description: Access to resource is not allowed.
      content:
        text/plain:
          schema:
            type: string        
      x-fa-exceptions:
        - name: ForbiddenAccessResponse
    InvalidOperationResponse:
      description: Requested operation is not supported.
      content:
        text/plain:
          schema:
            type: string        
      x-fa-exceptions:
        - name: InvalidOperationResponse
    UnauthorizedResponse:
      content:
        text/plain:
          schema:
            type: string        
      description: Unauthorized access.
      x-fa-exceptions:
        - name: UnauthorizedResponse
  schemas:
    BizTransaction:
      type: object
      x-no-faid: true
      description: bizTransaction
      x-ui-vue.js:
      - name: type
      - name: value
      properties:
        type:
          description: Type of transaction
          type: string
          example: 'http://foodauthent.de/data_set/fakx_model'
        value:
          description: Value of transaction
          type: string

    ChangePasswordRequest:
      description: change password request object
      type: object
      x-no-faid: true
      required:
       - current
       - new
      properties:
        current:
          description: current password
          type: string
          nullable: true
        new:
          description: new password
          type: string
          nullable: false
          
    DiscoveryServiceTransaction:
      description: DiscoveryServiceTransaction
      type: object
      x-ui-vue.js:
      - name: epcList
      - name: bizStep
      - name: readPoint
      - name: quantityList
      - name: action
      - name: disposition
      - name: bizTransactionList
      - name: gtin
      - name: bricks
      - name: sourceList
      - name: destinationList
      - name: ilmd
      - name: eventTime
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
        epcList:
          description: List of epcs
          type: array
          items:
            $ref: "#/components/schemas/Epc"
        bizStep:
          description: EPCIS bizStep
          type: string
        readPoint:
          description: Read point
          type: string
        quantityList:
          description: List of quantity
          type: array
          items: 
            $ref: "#/components/schemas/QuantityElement"
        action:
          description: Event action.
          type: string
          enum:
            - ADD
            - OBSERVE
            - DELETE
        disposition:
          description: EPCIS Disposition
          type: string
        bizTransactionList:
          description: List of bizTransactions
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        gtin:
          description: Global Trade Item Number
          type: string
        bricks:
          description: bricks
          type: array
          items:
            $ref: "#/components/schemas/GPCBrick"
        sourceList:
          description: List of sources
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        destinationList:
          description: List of destinations
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        ilmd:
          description: ilmd
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        eventTime:
          description: When the event happened
          type: string
          format: date
          
    DiscoveryServiceTransactionPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/DiscoveryServiceTransaction'
            
    DiscoveryServiceSearchFilter:
      description: DiscoveryServiceTransactionFilter
      type: object
      x-no-faid: true
      properties:
        epcList:
          description: List of epcs
          type: array
          items:
            $ref: "#/components/schemas/Epc"
        bizStep:
          description: EPCIS bizStep
          type: string
        readPoint:
          description: Read point
          type: string
        quantityList:
          description: List of quantity
          type: array
          items: 
            $ref: "#/components/schemas/QuantityElement"
        action:
          description: Event action.
          type: string
        disposition:
          description: EPCIS Disposition
          type: string
        bizTransactionList:
          description: List of bizTransactions
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        gtin:
          description: Global Trade Item Number
          type: string
        bricks:
          description: bricks
          type: array
          items:
            $ref: "#/components/schemas/GPCBrick"
        sourceList:
          description: List of sources
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        destinationList:
          description: List of destinations
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        ilmd:
          description: ilmd
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        eventTimeFrom:
          description: start date for the research
          type: string
          format: date
        eventTimeTo:
          description: end date for the research
          type: string
          format: date
    
            
    Epc:
      type: object
      x-no-faid: true
      description: epc
      x-ui-vue.js:
      - name: epc
      properties:
        epc:
          description: epc
          type: string

    FaObjectSet:
      type: object
      x-no-faid: true
      properties:
        sops:
          type: array
          items:
            type: string
            format: uuid
        products:
          type: array
          items:
            type: string
            format: uuid
        metadata:
          type: array
          items:
            type: string
            format: uuid
        tags:
          type: array
          items:
            type: string
            format: uuid
        models:
          type: array
          items:
            type: string
            format: uuid
        predictions:
          type: array
          items:
            type: string
            format: uuid
        workflows:
          type: array
          items:
            type: string
            format: uuid
        fingerprints:
          type: array
          items:
            type: string
            format: uuid
        fingerprintsets:
          type: array
          items:
            type: string
            format: uuid
        files:
          type: array
          items:
            type: string
            format: uuid
                      
    File:
      description: A file, e.g. to be uploaded
      type: object
      properties:
        filedata:
          description: The binary file data.
          type: string
          format: binary
      required:
        - filedata

    FileMetadata:
      description: Metadata of a file in the FoodAuthent-system.
      type: object
      x-ui-vue.js:
        - name: type
        - name: name
        - name: author
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        type:
          description: The file type.
          type: string
          enum:
            - knime_workflow
            - knime_model
            - python_script
            - sop_pdf
            - fingerprint_bruker
            - zip
            - fakx
            - isa_file
        name:
          description: A name for the file.
          type: string
        contentType:
          description: file content type
          type: string
          enum:
            - application/zip
            - application/octet-stream
        uploadName:
          description: >-
            The name of the file as uploaded. Will be set automatically if left
            empty and a file is uploaded for the first time.
          type: string
        description:
          description: A more verbose description of the file.
          type: string
        author:
          description: The authors name (TODO - could reference a user in the future).
          type: string
        date:
          description: The creation date.
          type: string
          format: date
        uploadDate:
          description: Time and date of the file upload. Will be set automatically.
          type: string
          format: date
        version:
          description: The file's version.
          type: integer
        additional-properties:
          description: Key-value-map for additional properties.
          #string to string map
          type: object
          additionalProperties:
            type: string
            
    ImportFile:
      type: object
      x-ui-vue.js:
        - name: file-id
          id-provider: upload-file
        - name: name
        - name: description
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        file-id:
          description: Id referencing the file in the fa-system.
          type: string
          format: uuid
        name:
          description: A short SOP name
          type: string
        description:
          description: A short description of the sop
          type: string

    # should always be part of a fingerprint set
    Fingerprint:
      description: A fingerprint object representing its metadata.
      type: object
      x-ui-vue.js:
        - name: sample-id
          id-provider: select-sample
        - name: sop-id
        - name: file-id
          id-provider: upload-file
        - name: type
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        sample-id:
          description: The fa-id of the sample the fingerprint is associated with.
          type: string
          format: uuid
          example: ""
        file-id:
          description: Id referencing the fingerprint file.
          type: string
          format: uuid
        sop-id:
          description: reference to sop used to create the fingerprint
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/FingerprintType"

    FingerprintSet:
      description: A set of fingerprints with its own id.
      type: object
      required:
        - name
        - fingerprint-ids
      x-ui-vue.js:
        - name: fingerprint-ids
          id-list-provider: select-fingerprint
          id-list-model: fingerprint-id
          id-list-label: Fingerprint-id
        - name: name
        - name: class-label
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ""
        fingerprint-ids:
          description: Ids referencing the fingerprints this set summarizes.
          type: array
          items:
            type: string
            format: uuid 
        name:
          description: A human-readable name of the fingerprint set.
          type: string
        description:
          description: A more detailed description of the fingerprint set.
          type: string
        class-label:
          description: A class label associated with this fingerprint set.
          type: string

    FingerprintSetPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/FingerprintSet'
            
    FingerprintPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/Fingerprint'

    FingerprintType:
      x-no-faid: true
      description: >-
        Type of the fingerprint. The referenced file musst reflect this type, too.
      type: object
      required: 
        - name
      x-ui-vue.js:
        - name: name
      properties:
        name:
          type: string
          enum:
            - bruker

    GPCAttribute:
      description: >-
        Global Product Classification Attribute for storing gpc brick details
      type: object
      x-no-faid: true
      x-ui-vue.js:
      - name: code
      - name: text
      - name: values
      properties:
        code:
          description: GPC attribute code
          type: string
        text:
          description: GPC attribute human readable text
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/GPCAttributeValue'

    GPCAttributeValue:
      description: >-
        Global Product Classification Attribute for storing gpc brick details
      type: object
      x-no-faid: true
      x-ui-vue.js:
      - name: code
      - name: text
      properties:
        code:
          description: GPC attribute value code
          type: string
        text:
          description: GPC attribute value human readable text
          type: string

    GPCBrick:
      description: >-
        Global Product Classification Brick for storing gpc brick details
      type: object
      x-no-faid: true
      x-ui-vue.js:
      - name: code
      - name: text
      - name: attributes
      properties:
        code:
          description: GPC brick code
          type: string
        text:
          description: GPC brick human readable text
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/GPCAttribute'

    ImportResult:
      type: object
      x-no-faid: true
      properties:
        problems:
          type: array
          items:
            type: string
        imported-objects:
          $ref: "#/components/schemas/FaObjectSet"

    Model:
      description: >-
        A model created via training and used for prediction. Can also be a
        workflow.
      type: object
      x-ui-vue.js:
        - name: name
        - name: description
        - name: author
        - name: version
        - name: type
        - name: tags
        - name: file-id
          id-provider: upload-file
        - name: workflow-id
          id-provider: select-workflow
        - name: fingerprintset-ids
          id-list-provider: select-fingerprintset
          id-list-model: fingerprintset-id
          id-list-label: Fingerprintset-id
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ""
        name:
          description: A name for the model.
          type: string
        description:
          description: A more verbose description of the model.
          type: string
        author:
          description: The authors name (TODO - could reference a user in the future).
          type: string
        date:
          description: The creation date.
          type: string
          format: date
        version:
          description: The model's version.
          type: integer
        type:
          $ref: "#/components/schemas/ModelType"
        tags:
          description: Descriptive tags/annotations for the model.
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        file-id:
          description: id referencing the model file.
          type: string
          format: uuid
        workflow-id:
          description: Optional reference to the workflow used to create this model.
          type: string
          format: uuid
        fingerprintset-ids:
          description: Reference to the fingerprint sets the model has been trained on
          format: array
          items:
            type: string
            format: uuid
        class-labels:
          description: the available class labels
          type: array
          items:
            type: string

    ModelPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/Model'
                                       
    ModelType:
      x-no-faid: true
      description: type of a model
      type: object
      required:
        - name
      x-ui-vue.js:
        - name: name
      properties:
        name:
         #TODO allow custom types that are not predefined
         description: >-
           The name of the type of the model, e.g., in order to be able to check for compatibility
           of the workflows using it.
         type: string
         enum:
           - knime_workflow
           - knime_python
           - knime_random_forest
           - pmml
           
    ObjectEvent:
      description: Object Event Transaction
      type: object
      x-ui-vue.js:
      - name: epcList
      - name: bizStep
      - name: readPoint
      - name: quantityList
      - name: action
      - name: disposition
      - name: bizTransactionList
      - name: gtin
      - name: bricks
      - name: eventTime
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
        epcList:
          description: List of epcs
          type: array
          items: 
            $ref: "#/components/schemas/Epc"
        bizStep:
          description: EPCIS bizStep
          type: string
        readPoint:
          description: Read point
          type: string
        quantityList:
          description: List of quantity
          type: array
          items: 
            $ref: "#/components/schemas/QuantityElement"
        action:
          description: Event action.
          type: string
          enum:
            - ADD
            - OBSERVE
            - DELETE
        disposition:
          description: EPCIS Disposition
          type: string
        bizTransactionList:
          description: List of bizTransactions
          type: array
          items:
            $ref: "#/components/schemas/BizTransaction"
        gtin:
          description: Global Trade Item Number
          type: string
        bricks:
          description: bricks
          type: array
          items:
            $ref: "#/components/schemas/GPCBrick"
        eventTime:
          description: When the event happened
          type: string
          format: date

    ObjectEventPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/ObjectEvent'
                                    
    Organization:
      description:  Organization Object 
      x-no-faid: true
      allOf:
        - type: object
          required:
            - dn
            - organizationName
          properties:
            dn:
              description: organization's LDAP dn
              type: string
              nullable: false
            organizationName:
              description: unique OrganizationalUnit name
              type: string
              nullable: false
        - $ref: '#/components/schemas/OrganizationBase'

    OrganizationBase:
      description:  Organization Base Object 
      type: object
      x-no-faid: true
      properties:
        description:
          description: verbose description
          type: string
          nullable: true
        faxNumbers:
          description: fax numbers
          type: array
          items:
            type: string
          nullable: true
        phoneNumbers:
          description: phone numbers
          type: array
          items:
            type: string
          nullable: true
        businessCategory:
          description: business category
          type: string
          nullable: true
        postalAddress:
          $ref: '#/components/schemas/OrganizationalPostalAddress'
        billingAddress:
          $ref: '#/components/schemas/OrganizationalPostalAddress'

    OrganizationCreateRequest:
      description:  Organization Object 
      x-no-faid: true
      allOf:
        - type: object
          required:
            - parentDn
            - organizationName
          properties:
            parentDn:
              description: parent organization's LDAP dn
              type: string
              nullable: false
            organizationName:
              description: unique OrganizationalUnit name
              type: string
              nullable: false              
        - $ref: '#/components/schemas/OrganizationBase'

    OrganizationalPostalAddress:
      description: organizational postal address object
      type: object
      x-no-faid: true
      allOf:
        - $ref: '#/components/schemas/PostalAddress'
        - type: object
          x-no-faid: true
          properties:
            recipientName:
              description: recipient address part
              type: string

    PostalAddress:
      description: postal address object
      type: object
      x-no-faid: true
      required:
        - street
        - postalCode
        - localityName
      properties:
        otherRecipientInformation:
          description: recipient address part
          type: string
        street:
          description: street address part
          type: string
        postalCode:
          description: postalCode address part
          type: string
        localityName:
          description: locality/city address part
          type: string
        stateOrProvinceName:
          description: stateOrProvinceName address part
          type: string
        country:
          description: country address part
          type: string

    #predictions per fingerprint set!!
    Prediction:
      type: object
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        prediction-map:
          description:
            The predictions for each individual fingerprint.
            The map key is the fingerprint-id. 
          type: object
          additionalProperties:
            description: map from class label to probability
            type: object
            additionalProperties:
              type: number
              format: float
              maximum: 1
              minimum: 0
        workflow-id:
          description: Workflow used for the prediction.
          type: string
          format: uuid
          example: ''
        fingerprintset-id:
          description: Id of the set the prediction has been done for.
          type: string
          format: uuid
          example: ''
        model-id:
          description: The model that has been used for the prediction.
          type: string
          format: uuid
          example: ''
    
    PredictionJob:
      description: Represents prediction job.
      type: object
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        prediction-id:
          description: >-
            The id of the prediction result if the job has completed
            successfully.
          type: string
          format: uuid
          example: ''
        status:
          description: The current status of the prediction job.
          type: string
          enum:
            - running
            - success
            - failed
        status-message:
          description: 'A message, e.g., in case the workflow failed.'
          type: string

    PredictionJobPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/PredictionJob'

    PredictionPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/Prediction'

    # Inputs and outputs for different workflow types (see type-property of the workflow entity).
    # Not used by any endpoint but as entity directly!
    # Changes here might cause (test) workflows to not work anymore.
    PredictionWorkflowInput:
      description: Describes the input required by a prediction workflow.
      type: object
      x-no-faid: true
      properties:
        parameters:
          description: The workflow parameters as given provided by the Workflow-entity.
          type: array
          items:
            $ref: '#/components/schemas/WorkflowParameter'
        fingerprintset:
          $ref: '#/components/schemas/FingerprintSet'
        fingerprint-URIs:
          description: >-
            URIs pointing to the resource containg the fingerprints to predict
            the labels for.
            (in the same order as the fingerprint-ids of the fingerprint-set)
          type: array 
          items:
            type: string
            format: uri
        model-URI:
          description: >-
            optional model uri (if required by the workflow) pointing to the
            model to use
          type: string
          format: uri

    PredictionWorkflowOutput:
      description: Describes the outputs delivered by a prediction workflow.
      type: object
      x-no-faid: true
      properties:
        prediction-map:
          description:
            The predictions for each individual fingerprint.
            The map key is the fingerprint-id. 
          type: object
          additionalProperties:
            description: map from class label to probability
            type: object
            additionalProperties:
              type: number
              format: float
              maximum: 1
              minimum: 0

    Product:
      description: >-
        Global product metadata, e.g., country of origin, etc. There can be
        multiple fingerprints for one product.
      type: object
      x-ui-vue.js:
        - name: gtin
        - name: brand
        - name: targetMarket
        - name: labelDescription
        - name: companyName
        - name: productClassification
        - name: countryOfOrigin
        - name: regionOfOriginClaims
        - name: comment
        - name: gpcBricks
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        gtin:
          type: string
        brand:
          description: Brand
          type: string
          example: Bayernland
        targetMarket:
          description: Target Market
          type: string
          example: 'DE, Deutschland'
        labelDescription:
          description: Label Description
          type: string
          example: 'Bayernland AllgÃƒÆ’Ã‚Â¤uer Emmentaler 45%, ca. 1kg'
        companyName:
          description: Company Name
          type: string
          example: Bayernland eG
        productClassification:
          description: Product Classification
          type: string
          example: 10000028 - KÃƒÆ’Ã‚Â¤se / KÃƒÆ’Ã‚Â¤seersatz (leicht verderblich)
        countryOfOrigin:
          description: Country Of Origin
          type: string
          example: 'DE, Deutschland'
        regionOfOriginClaims:
          description: Region Of Origin-Claims
          type: string
          example: ÃƒÆ’Ã¢â‚¬Å¾thopia
        ingredientStatement:
          $ref: '#/components/schemas/ProductIngredientStatement'
        comment:
          description: Comment
          type: string
          example: Comment on sample
        gpcBricks:
          type: array
          items:
            $ref: '#/components/schemas/GPCBrick'

    ProductIngredientStatement:
      description: Incredient Statement by language Code
      type: object
      x-no-faid: true
      properties:
        language:
          type: string
        text:
          type: string
      example: >-
        de: Zutaten pasteurisierte KUHMILCH, MilchsÃƒÆ’Ã‚Â¤urebakterienkulturen, mikrobieller Labaustauschstoff, Speisesalz
        en: ingredients...

    ProductPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'

    QuantityElement:
      type: object
      x-no-faid: true
      description: bizTransaction
      x-ui-vue.js:
      - name: epcClass
      - name: quantity
      - name: uom
      properties:
        epcClass:
          description: epcClass
          type: string
        quantity:
          description: quantity
          type: string
        uom:
          description: uom
          type: string

    Sample:
        description: Sample
        type: object
        x-ui-vue.js:
        - name: product-id
          id-provider: select-product
        - name: sop-id
          id-provider: select-sop
        - name: sample-id
        - name: dateOfSampleDrawing
        - name: lot
        - name: samplingPlace
        - name: bestBeforeDate
        - name: application
        #- name: typeOfAnalysis
        - name: comments
        properties:
          fa-id:
            description: A global id within the FoodAuthent-system.
            type: string
            format: uuid
          product-id:
            description: referenced product fa-id
            type: string
            format: uuid
          sop-id:
            description: referenced sop used to create the sample
            type: string
            format: uuid
          sample-id:
            description: Sample Id
            type: string
            example: 401234500000123
          dateOfSampleDrawing:
            description: Date of Sample Drawing
            # deactivated for now since we don't use it
            # and it requires extra work to clean the BfR-tables
            # to fit the format
            #format: date-time
            type: string
            example: 2018-02-22T00:00:00.000Z
          lot:
            description: Lot
            type: string
            example: ABC123
          samplingPlace:
            description: Sampling Place
            type: string
            example: Lankreis XY
          bestBeforeDate:
            description: Best Before Date
            # deactivated for now since we don't use it
            # and it requires extra work to clean the BfR-tables
            # to fit the format
            #format: date-time
            type: string
            example: 2018-09-12T00:00:00.000Z
          application:
            description: Application
            type: string
            example: FoodAuthent
          # causes problems in de-/serialization when empty
          # de-/serialization logic needs fixing!
          #typeOfAnalysis:
          #  description: Type Of Analysis
          #  type: array
          #  items:
          #    type: string
          #    example: TBD
          comments:
            description: Comment
            type: array 
            items:
              type: string
              example: Comment on sample
            
    SamplePageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/Sample'
                                                  
    SOP:
      type: object
      x-ui-vue.js:
        - name: file-id
          id-provider: upload-file
        - name: name
        - name: description
        - name: product-id
          id-provider: select-product
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        file-id:
          description: Id referencing the file in the fa-system.
          type: string
          format: uuid
        name:
          description: A short SOP name
          type: string
        description:
          description: A short description of the sop
          type: string
        product-id:
          description: A reference to a product this sop is made for.
          type: string
          format: uuid
          example: ''

    SOPPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/SOP'
            
    FilePageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/FileMetadata'
            
    SystemInfo:
      x-no-faid: true
      description: The system status with some statistics etc.
      type: object
      properties:
        num-sops:
          type: integer
          format: int64
        num-files:
          type: integer
          format: int64
        num-products:
          type: integer
          format: int64
        num-fingerprints:
          type: integer
          format: int64
        num-fingerprintsets:
          type: integer
          format: int64
        num-workflows:
          type: integer
          format: int64
        num-samples:
          type: integer
          format: int64
        num-predictions:
          type: integer
          format: int64
        num-models:
          type: integer
          format: int64
        num-prediction-jobs:
          type: integer
          format: int64
        num-training-jobs:
          type: integer
          format: int64
        

    Tag:
      description: A tag/label for objects.
      type: object
      x-ui-vue.js:
        - name: name
        - name: description
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        name:
          description: A human-readable name
          type: string
        description:
          description: A more verbose description.
          type: string
        type:
          description: >-
            The type of the tag, e.g. whether it's a tag for a workflow, a model
            or a fingerprint.
          type: string
          enum:
            - workflow
            - model
            - fingerprint
            - sop

    TagPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    TrainingJob:
      description: Represents model training job.
      type: object
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ''
        model-id:
          description: The created model after successful training.
          type: string
          format: uuid
          example: ''
        fingerprintset-ids:
          description: Reference to the fingerprint sets the model has been trained on
          format: array
          items:
            type: string
            format: uuid
        status:
          type: string
          enum:
            - running
            - success
            - failed
        status-message:
          description: 'A message, e.g., in case the workflow failed.'
          type: string

    TrainingJobPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/TrainingJob'

    TrainingWorkflowInput:
      description: Describes the input required by a training workflow.
      type: object
      x-no-faid: true
      properties:
        parameters:
          description: The workflow parameters as provided by the Workflow-entity.
          type: array
          items:
            $ref: '#/components/schemas/WorkflowParameter'
        fingerprints:
           type: array
           items:
            $ref: "#/components/schemas/TrainingWorkflowInputFingerprint" 
    
    TrainingWorkflowInputFingerprint:
      type: object
      x-no-faid: true
      properties:
        URI:
          type: string
          format: uri
        class-label:
          type: string
        fingerprint-id:
          type: string
          format: uuid

    TrainingWorkflowOutput:
      description: Describes the outputs delivered by a training workflow.
      type: object
      x-no-faid: true
      properties:
        model-uri:
          description: URI pointing to the created model file.
          type: string
          format: uri

    UserAuthenticationRequest:
      description: Request Object for User authentication
      type: object
      x-no-faid: true
      required:
        - user
        - password
      properties:
        user:
          type: string
        password:
          type: string
          
    User:
      description:  User Object 
      x-no-faid: true
      allOf:
        - type: object
          required:
            - dn
            - userName
          properties:
            dn:
              description: LDAP dn
              type: string
              nullable: false
            userName:
              description: unique userid
              type: string
              nullable: false
        - $ref: '#/components/schemas/UserBase'
        
    UserBase:
      description:  User Base Object 
      type: object
      x-no-faid: true
      required:
        - lastName
        - givenName
      properties:
        title:
          description: title
          type: string
          nullable: true
        givenName:
          description: givenName / first name
          type: string
          nullable: true
        lastName:
          description: last name
          type: string
          nullable: true
        userName:
          description: username
          type: string
          nullable: true
        mail:
          description: email addresses
          type: array
          items:
            type: string
          nullable: true
        description:
          description: verbose description
          type: string
          nullable: true
        faxNumbers:
          description: fax numbers
          type: array
          items:
            type: string
          nullable: true
        phoneNumbers:
          description: phone numbers
          type: array
          items:
            type: string
          nullable: true
        homePhoneNumbers:
          description: home phone numbers
          type: array
          items:
            type: string
          nullable: true
        mobilePhoneNumbers:
          description: mobile phone numbers
          type: array
          items:
            type: string
          nullable: true
        businessCategory:
          description: business category
          type: string
          nullable: true
        postalAddress:
          $ref: '#/components/schemas/PostalAddress'
        billingAddress:
          $ref: '#/components/schemas/PostalAddress'
        secretary:
          description: secretary
          type: string
          nullable: true
        employeeType:
          description: employee type
          type: string
          nullable: true
        employeeNumber:
          description: employee number
          type: string
          nullable: true
        labeledURI:
          description: URIs
          type: array
          items:
            type: string
          nullable: true

    UserCreateRequest:
      description:  User Object 
      x-no-faid: true
      allOf:
        - type: object
          required:
            - parentDn
            - userName
          properties:
            parentDn:
              description: parent organization's LDAP dn
              type: string
              nullable: false
            userName:
              description: unique userid
              type: string
              nullable: false
        - $ref: '#/components/schemas/UserBase'
       
    UserGroup:
      description:  UserGroup Object 
      x-no-faid: true
      allOf:
        - type: object
          required:
            - dn
            - name
          properties:
            dn:
              description: LDAP dn
              type: string
              nullable: false
            name:
              description: unique group name
              type: string
              nullable: false  
        - $ref: '#/components/schemas/UserGroupBase'

    UserGroupBase:
      description:  UserGroup Base Object 
      type: object
      x-no-faid: true
      required:
        - members
      properties:
        description:
          description: verbose description
          type: string
          nullable: true
        members:
          description: list of members user dn
          type: array
          items:
            type: string

    UserGroupCreateRequest:
      description:  UserGroup Object for creating new groups
      x-no-faid: true
      allOf:
        - type: object
          required:
            - name
          properties:
            name:
              description: unique group name
              type: string
              nullable: false  
        - $ref: '#/components/schemas/UserGroupBase'
          
    Workflow:
      type: object
      description: A workflow for a certain task.
      required:
        - type
        - file-id
        - name
        - representation
      x-ui-vue.js:
        - name: name
        - name: description
        - name: type
        - name: parameters
        - name: tags
        - name: representation
        - name: file-id
          id-provider: upload-file
      properties:
        fa-id:
          description: A global id within the FoodAuthent-system.
          type: string
          format: uuid
          example: ""
        name:
          type: string
        description:
          type: string
        representation:
          description: >-
            The workflow representation, e.g. represented by a scripting
            language, cwl or a KNIME-workflow.
          type: string
          enum:
            - cwl
            - r
            - python
            - knime
        type:
          #TODO allow custom types that are not predefined
          #TODO put in extra entity?
          description: >-
            The type of the workflow.  IMPORTANT: This property determines the
            required workflow input and output, e.g., PredictionWorkflowInput
            and PredicitonWorkflowOutput-entity.
          type: string
          #TODO another potential type: preprocessing workflow
          # Note: the types are decorated with unique identifiers
          # in order to be able to reliably filter them with a simple keyword search.
          # It's a workaround for the prototype and a more sophisticated solution
          # (e.g. the option for property-specific queries) is required.
          enum:
            - prediction_workflow_e680f8c1
            - training_workflow_64b046cb
        parameters:
          description: "The parameters of the workflow, TODO - should maybe be a map."
          type: array
          items:
            $ref: "#/components/schemas/WorkflowParameter"
        tags:
          description: Descriptive tags/annotations for the workflow.
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        file-id:
          description: id referencing the workflow file.
          type: string
          format: uuid
        output-types:
          $ref: "#/components/schemas/WorkflowIOTypes"
        input-types:
          $ref: "#/components/schemas/WorkflowIOTypes"

    WorkflowIOTypes:
      x-no-faid: true
      description: >-
        Definition of the workflows input and output types. Types that are not required as input are empty.
      type: object
      properties:
        fingerprint-type:
          $ref: "#/components/schemas/FingerprintType"
        model-type:
          $ref: "#/components/schemas/ModelType"

    WorkflowPageResult:
      type: object
      x-no-faid: true
      properties:
        pageNumber:
          type: integer
        pageCount:
          type: integer
        resultCount:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
            
    WorkflowParameter:
      type: object
      description: Represents a workflow parameter.
      x-no-faid: true
      x-ui-vue.js:
        - name: name
        - name: required
        - name: type
        - name: value
      properties:
        name:
          description: the parameter name
          type: string
        required:
          description: whether the parameter is required
          type: boolean
        type:
          description: the parameter type
          type: string
          enum:
            - string
            - number
        value:
          description: the parameter value
          type: string
            
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
security:
  - jwtAuth: []              