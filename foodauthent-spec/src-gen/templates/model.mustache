{{>licenseInfo}}
package {{package}};

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

{{#imports}}
import {{import}};
{{/imports}}

{{#models}}
{{#model}}
{{#vendorExtensions.x-non-empty}}import com.fasterxml.jackson.annotation.JsonInclude;{{/vendorExtensions.x-non-empty}}
{{#isEnum}}{{>modelEnum}}{{/isEnum}}
{{^isEnum}}

/**
 * {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
 *
 {{>authors}}
 */
{{>generatedAnnotation}}{{#vendorExtensions.x-non-empty}}
@JsonInclude(JsonInclude.Include.NON_EMPTY){{/vendorExtensions.x-non-empty}}
public class {{classname}} {{#parent}}extends {{{parent}}}{{/parent}} {{^parent}} extends FaModel{{/parent}} {

    {{#vars}}
    {{#isEnum}}
    {{^isContainer}}
{{>enumClass}}
    {{/isContainer}}
    {{/isEnum}}
    {{#items.isEnum}}
      {{#items}}
      {{^isContainer}}
{{>enumClass}}
      {{/isContainer}}
      {{/items}}
    {{/items.isEnum}}
  {{/vars}}

  {{#vars}}
  protected {{{datatypeWithEnum}}} {{name}};
  {{/vars}}

  public String getTypeID() {
    return "{{name}}";
  }


{{^parent}}
  {{#vendorExtensions.x-no-faid}}
  @Override
  public java.util.UUID getFaId() {
  	return null;
  }
  {{/vendorExtensions.x-no-faid}}
{{/parent}}

  protected {{classname}}() {}

  private {{classname}}({{classname}}Builder builder) {
    {{#parent}}super();{{/parent}}
    {{#allVars}}
    {{#required}}
    if(builder.{{name}} == null) {
        throw new IllegalArgumentException("{{name}} must not be null.");
    }
    {{/required}}
    {{name}} = immutable(builder.{{name}});
    {{/allVars}}

    {{^vendorExtensions.x-no-faid}}
    faId = generateFaIdIfMissing(faId);
    {{/vendorExtensions.x-no-faid}}

  }

   /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (getClass() != o.getClass()) {
            return false;
        }
        {{classname}} ent = ({{classname}})o;
        {{^parent}}
        return{{#allVars}} Objects.equals({{name}}, ent.{{name}}){{^-last}} &&{{/-last}}{{/allVars}};
        {{/parent}}
        {{#parent}}
        return super.equals(ent);
        {{/parent}}
    }


  {{#vars}}
  /**
  {{#description}}
   * {{description}}
  {{/description}}
  {{^description}}
   * Get {{name}}
  {{/description}}
  {{#minimum}}
   * minimum: {{minimum}}
  {{/minimum}}
  {{#maximum}}
   * maximum: {{maximum}}
  {{/maximum}}
   * @return {{name}} {{#required}}, never <code>null</code>{{/required}}
   */
  {{#useBeanValidation}}{{>beanValidation}}{{/useBeanValidation}}public {{{datatypeWithEnum}}} {{getter}}() {
        return {{name}};
    }

  {{/vars}}

 	/**
  	 * @return a newly created builder
  	 */
  	public static {{classname}}Builder builder() {
  		return new {{classname}}Builder();
  	}

  	/**
	 * Copy-builder, i.e. creates a new builder with all properties of the passed
	 * entity pre-set.
	 *
	 * @param entity
	 *            entity to copy the properties from
	 * @return a new builder with the properties set
	 */
	public static {{classname}}Builder builder({{classname}} entity) {
		{{classname}}Builder builder = builder();
    	{{#allVars}}
        builder.{{name}} = entity.{{name}};
    	{{/allVars}}
 		return builder;
  	}


    public static class {{classname}}Builder {{#parent}}extends {{{parent}}}Builder {{/parent}}{

        protected {{classname}}Builder(){
            {{#parent}}super();{{/parent}}
        }

        {{#allVars}}
        private {{{datatypeWithEnum}}} {{name}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
        {{/allVars}}

        {{#allVars}}
        {{^isReadOnly}}
        /**
       {{#description}}
         * {{description}}
        {{/description}}
        {{^description}}
         * Get {{name}}
        {{/description}}
        {{#minimum}}
         * minimum: {{minimum}}
        {{/minimum}}
        {{#maximum}}
         * maximum: {{maximum}}
        {{/maximum}}
         * @return {{name}} {{#required}}, never <code>null</code>{{/required}}
         */
        public {{classname}}Builder {{setter}}({{{datatypeWithEnum}}} {{name}}) {
             {{#required}}
             if({{name}} == null) {
                 throw new IllegalArgumentException("{{name}} must not be null.");
             }
             {{/required}}
             this.{{name}} = {{name}};
             return this;
        }

        {{/isReadOnly}}
        {{/allVars}}

        public {{classname}} build() {
            return new {{classname}}(this);
        }

    }


    /**
     * Turns an object into an immutable one (if not already).
     * TODO move it somewhere else
     *
     * @param obj the object to treat
     * @return the object itself or a immutable copy
     */
    @SuppressWarnings({"rawtypes", "unchecked"})
    public static <T> T immutable(final T obj) {
        if (obj == null) {
            return null;
        } else if (obj instanceof Map) {
            return (T)Collections.unmodifiableMap(new HashMap((Map)obj));
        } else if (obj instanceof List) {
            return (T)Collections.unmodifiableList(new ArrayList((List)obj));
        } else {
            return obj;
        }
    }


}
{{/isEnum}}
{{/model}}
{{/models}}
