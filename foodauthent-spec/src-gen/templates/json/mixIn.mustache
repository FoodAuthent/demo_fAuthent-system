{{>licenseInfo}}
package {{package}};

{{#imports}}
import {{import}};
{{/imports}}

import java.util.UUID;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

{{#models}}
{{#model}}
  {{#vars}}
    {{#isEnum}}
import org.foodauthent.model.{{model.name}}.{{datatypeWithEnum}};
    {{/isEnum}}
  {{/vars}}


import org.foodauthent.model.{{name}};
import org.foodauthent.model.{{name}}.{{name}}Builder;
{{#children}}
import org.foodauthent.model.{{name}};
{{/children}}

/**
 * MixIn class for entity implementations that adds jackson annotations for de-/serialization.
 *
 {{>authors}}
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.EXISTING_PROPERTY,
    property = "{{discriminator}}",
    visible = true,
    defaultImpl = {{name}}.class)
@JsonSubTypes({
    @Type(value = {{name}}.class, name="{{name}}")
{{#children}}
,
  @Type(value = {{name}}.class, name = "{{name}}")
{{/children}}
})
@JsonDeserialize(builder={{name}}Builder.class)
{{>generatedAnnotation}}
public interface {{classname}} {

	@JsonIgnore
	public long getPersistenceId();
	
    @JsonIgnore
    public String getTypeID();
    
   	{{#vendorExtensions.x-no-faid}}
   	@JsonIgnore
  	public UUID getFaId();
  	{{/vendorExtensions.x-no-faid}}
    

{{#allVars}}
    @JsonProperty("{{baseName}}")
    public {{{datatypeWithEnum}}} {{getter}}();
    
{{/allVars}}
{{/model}}
{{/models}}

    /**
     * MixIn class for entity builder implementations that adds jackson annotations for the de-/serialization.
     *
     * @author Martin Horn, University of Konstanz
     */
    {{#models}}
    {{#model}}
    @JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        property = "{{discriminator}}",
        defaultImpl = {{name}}Builder.class)
    @JsonSubTypes({
        @Type(value = {{name}}.{{name}}Builder.class, name="{{name}}")
    {{#children}}
        ,
      @Type(value = {{name}}.{{name}}Builder.class, name = "{{name}}")
    {{/children}}
    })
    // AUTO-GENERATED CODE; DO NOT MODIFY
    public static interface {{classname}}Builder {
    
        public {{classname}} build();
    
    {{#allVars}}
        @JsonProperty("{{baseName}}")
        public {{classname}}Builder {{setter}}(final {{{datatypeWithEnum}}} {{name}});
        
    {{/allVars}}
    }
    {{/model}}
    {{/models}}


}

